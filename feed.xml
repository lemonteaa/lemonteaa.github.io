<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="https://lemonteaa.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lemonteaa.github.io/" rel="alternate" type="text/html" /><updated>2017-10-09T23:54:06+08:00</updated><id>https://lemonteaa.github.io/</id><title type="html">(into tech :lemontea)</title><subtitle>Lemontea's tech blog: A math lover in awe of the beauty and power of high level programming languages
</subtitle><entry><title type="html">The Monad Tutorial Fallacy, Part Two: Monad, Kleisli and Eilenberg-Moore Category</title><link href="https://lemonteaa.github.io/fundamentals/2017/10/03/the-monad-tutorial-fallacy-part-two-monad-kleisli-and-eilenberg-moore-category.html" rel="alternate" type="text/html" title="The Monad Tutorial Fallacy, Part Two: Monad, Kleisli and Eilenberg-Moore Category" /><published>2017-10-03T20:36:00+08:00</published><updated>2017-10-03T20:36:00+08:00</updated><id>https://lemonteaa.github.io/fundamentals/2017/10/03/the-monad-tutorial-fallacy-part-two-monad-kleisli-and-eilenberg-moore-category</id><content type="html" xml:base="https://lemonteaa.github.io/fundamentals/2017/10/03/the-monad-tutorial-fallacy-part-two-monad-kleisli-and-eilenberg-moore-category.html">&lt;p&gt;&lt;em&gt;(Go to &lt;a href=&quot;/fundamentals/2017/08/28/the-monad-tutorial-fallacy-part-one-introduction-prequel.html&quot;&gt;Part 1&lt;/a&gt; of this series)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In part 2 of this series we explain the technical core of the theory of Monad. Of central importance is the attempt to provide algebraic interpretation of everything, as well as to convert things into suitably algebraic structures. We will also revisit this issue at an arguably “better” (but more advanced) angle in part 5.&lt;/p&gt;

&lt;p&gt;While the picture for an adjunction is relatively clear, it suffers from needing to work with two categories at the same time. Monad fixes this by composing the left and right adjoint functors into an endofunctor &lt;script type=&quot;math/tex&quot;&gt;T = G \circ F&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;T: \mathcal{C} \rightarrow \mathcal{C}&lt;/script&gt; over a single category. An additional advantage with this construction is that it is more algebraic as it is now composable: we can iterate &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; to get &lt;script type=&quot;math/tex&quot;&gt;T^2&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;T^3&lt;/script&gt; etc for example. &lt;!--more--&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;on-the-benefit-of-being-algebraicfunctional&quot;&gt;On the benefit of being Algebraic/Functional&lt;/h2&gt;
&lt;p&gt;It is perhaps appropriate at this point to pontificate on what does it means to be “algebraic”, and why do we obsesses over it, before proceeding further on the details. From my armchair philosophical perspective, being “algebraic” simply mean having a system of rules for manipulating symbols. But this “definition” is obviously wrong, for with this requirement the whole of pure mathematics at the very least qualifies! (All math are built from logic, and formal logic is just such a system of rules, albeit a bit more complicated than arithmetic) What distinguishes algebra from other such formal system is an intrinsic quality that it is easy and convenient to use.&lt;/p&gt;

&lt;p&gt;But “easy” is subjective. And there seems to be more than one kind of feature that contribute to this elusive quality. These features include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The rules and system should be as Context-free as possible, so that operations can be liberally applied, and so that a piece of operation/reasoning carried out somewhere can be taken and re-applied anywhere else
    &lt;ul&gt;
      &lt;li&gt;i.e. Equational Reasoning&lt;/li&gt;
      &lt;li&gt;And in other words things should be reusable.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Composability. (Excuse my circular reasoning) It should be possible to chain functions together and if these functions are expressed with certain specific structures in mind, these structures should be preserved after composition.
    &lt;ul&gt;
      &lt;li&gt;Moreover, it should ideally have the Compositionality property - the meaning of a composed function should be derivable from the meaning of the individual functions alone.&lt;/li&gt;
      &lt;li&gt;What they imply are that you have an easy way to build larger structures out of smaller one, while controlling (semantic) complexity.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are a programmer, you may find this list suspiciously familiar even though you may have forgotten all the math since you’re done with high school. Basically they are just the benefits of functional programming: pure functions are composable, safe, reusable, and easy to reason about and understand.&lt;/p&gt;

&lt;h2 id=&quot;defining-monad-is-a-dangerous-affair&quot;&gt;Defining Monad is a Dangerous Affair&lt;/h2&gt;
&lt;p&gt;If one dig around a bit in Haskell’s community, one can easily see how this is a topic laden with traps, controversies, and a sea of confused/perplexed beginners. There is an active advise against posting new Monad tutorials. There is a trail of &lt;a href=&quot;https://wiki.haskell.org/Monad_tutorials_timeline&quot;&gt;past attempts&lt;/a&gt; at such tutorials. There is a post in the wiki specifically to debunk what &lt;a href=&quot;https://wiki.haskell.org/What_a_Monad_is_not&quot;&gt;Monad is not&lt;/a&gt; and notwithstanding such effort, it is (in this author’s opinion) next to impossible to eradicate those “wrong” definitions, not even in principle. Oh and if you try to read Monad tutorial (like this one), you will find out that everyone’s definition is &lt;a href=&quot;http://www.codecommit.com/blog/ruby/monads-are-not-metaphors&quot;&gt;different&lt;/a&gt;. &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;That’s quite a downer, to put it mildly. Why? &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;begin rant&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Please bear with me as I do a second round of philosophizing and go meta. Defining real world, nebulous concepts is almost always messy (in contrast to the pristine one you get in pure math). They are typically complicated. Have multiple facets. Have multiple possible perspectives to look at that are mostly equally reasonable within their own frameworks. (Or, at least, no one managed to convince anyone else in case of a conflict) Have multiple layers of understanding possible to attain. Ad Nauseum.&lt;/p&gt;

&lt;p&gt;With this kind of stuff, saying any particular definition is “wrong” is meaningless without defining “wrongness” within a suitable context. Say in a hypothetical (i.e. oversimplified) situation there is a hierarchy of definitions possible, from the most specific to the most general. Is the specific one wrong because it fails to capture the full range of possibilities, or the general one wrong because it is utterly useless for application? Sometimes I think we geeks and nerds need to stop pretending math/logic/programming is the solo, absolute standard of truth in all domains. Just go read some (ok, any) sociology texts and resists the temptation to call everything in it bullshit. (except some toxic part of postmodernism maybe?)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;end rant&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But it seems irresponsible to go on without any definition at all besides the formal one. So, in light of the sensitiveness of this issue, I will tread carefully and give more than one definitions.&lt;/p&gt;

&lt;p&gt;A Monad is not about statefulness/impurity. It’s also not about explicit sequencing of execution. They are, however, possible applications of Monad. (Among others)&lt;/p&gt;

&lt;h3 id=&quot;most-general-definition-i-can-think-of&quot;&gt;Most general definition I can think of&lt;/h3&gt;
&lt;p&gt;(Inspired by this &lt;a href=&quot;https://www.reddit.com/r/haskell/comments/68fb19/monad_tutorial_no_57005/dgynjik/&quot;&gt;brilliant comment&lt;/a&gt; over there)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Monad is a mathematical theory that can be used to extend the semantics of a programming language in a principled manner, provided the extra structures admits an algebraic formulation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because of this I believe the closest comparison one can make is versus Macro in the Lisp family of language &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. At least they are roughly at the same conceptual level of abstraction.&lt;/p&gt;

&lt;p&gt;One should also be careful to distinguish between Monad-as-a-concept, versus how it is implemented in actual languages.&lt;/p&gt;

&lt;p&gt;Monad is not a &lt;a href=&quot;http://lambda-diode.com/programming/monads-are-a-class-of-hard-drugs&quot;&gt;silver bullet&lt;/a&gt; nor black magic. It is, in the final analysis, up to you to decide what to do with it.&lt;/p&gt;

&lt;h3 id=&quot;operational-definition---full-buy-in&quot;&gt;Operational definition - Full buy in&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A Monad is a contract between the programmer and the language. Programmer agrees to structure their program in a particular form, and to supply proof of the Monad axiom themselves, outside of the program. In return, the language promises automatic guarantee of some properties of the program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But asking a programmer to write proof is scary, horrible stuff. Monad is thoughtful in this regard:
As there is multiple equivalent formulation of Monad, one have the option to choose which one to work on.
The math statements that one is actually required to prove is also algebraic/equational in nature, so it is in principle possible to just compute/derive with lambda calculus blindly and hope that the equations just line up, as opposed to requiring professional grade mathematical literacy.&lt;/p&gt;

&lt;h3 id=&quot;operational-definition---partial-buy-in&quot;&gt;Operational definition - Partial buy in&lt;/h3&gt;
&lt;p&gt;In case even that is too much, it is also possible to write code in a monadic style. In this case one adopts patterns inspired by the Monad, but refrain from (actively) doing the proof or making their code completely compliant to the requirement. One may still gain some benefits, but foregoes the mathematical guarantee offered by the theory.&lt;/p&gt;

&lt;h2 id=&quot;formal-definition-of-monad&quot;&gt;Formal definition of Monad&lt;/h2&gt;
&lt;p&gt;For delicate, highly abstract entity like Monad (as well as other heavily categorical construct, and especially things involving &lt;a href=&quot;https://ncatlab.org/nlab/show/higher+category+theory&quot;&gt;higher category&lt;/a&gt;), one can argue that the only safe way to grok it would be to look at the full, formal definition (otherwise one runs the risk of missing a “small” piece of the definition - which usually contains a “large” number of such pieces - that turns out to be crucial in unexpected place). But doing so come with the cost of things being opaque and complicated. While I may not be able to solve the “complicated” part (irreducible complexity, say), I have tried to deal with the first by presenting a mixture of motivation, discourse, supporting theories, etc.&lt;/p&gt;

&lt;p&gt;Even so, we won’t try to understand Monad all in one go, preferring an iterative and indirect approach instead. We will provide a preliminary, algebraic understanding of Monad, only in the context of classical Mathematics (through the “Universal” example of Free algebra vs Forgetful Functor). In part 3 of this series we will give an interpretation within the context of raw vs structured computational model, alongside actual examples of Monad in programming, while in part 4 we will give alternative, equivalent formulation of Monad that admits an easier interpretation in the computational context. (Part 5’s purpose has been stated at the beginning of this article) Nonetheless, all these niceties depends on the core theory presented in this part.&lt;/p&gt;

&lt;p&gt;The actual definition of &lt;a href=&quot;https://en.wikipedia.org/wiki/Monad_(category_theory)&quot;&gt;Monad&lt;/a&gt; is here (Don’t worry if you don’t get it all at once! The important thing in this part is actually the theory of Kleisli and Eilenberg-Moore Category since I don’t see them fully interpreted anywhere except for some handwaving. Just read on and stay tuned for part 3 - 5 :P ):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Monad over a category &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt; is a triple &lt;script type=&quot;math/tex&quot;&gt;(T, \eta, \mu)&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; is a functor &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C} \rightarrow \mathcal{C}&lt;/script&gt;.
    &lt;ul&gt;
      &lt;li&gt;(for those not studying math: I must highlight that a functor when implemented in a programming language is actually two things: &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; here maps objects in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt; to objects in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt;, and &lt;strong&gt;also&lt;/strong&gt; morphisms/function in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt; to morphisms/function in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt;, where the (co)domain object is also mapped. That is, &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; sends &lt;script type=&quot;math/tex&quot;&gt;f: X \rightarrow Y&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;Tf: TX \rightarrow TY&lt;/script&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\eta&lt;/script&gt; is the unit (sometimes called &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; in programming), which is a natural transformation from the identity functor to &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt;. More concretely for any object &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt;, we have a morphism/function &lt;script type=&quot;math/tex&quot;&gt;\eta_X: X \rightarrow TX&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;And &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; is the “multiplication” / “algebraic operation” (called &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;flatten&lt;/code&gt; in programming). It is also a natural transformation, this time from &lt;script type=&quot;math/tex&quot;&gt;T^2&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;. That is it is a polymorphic function from &lt;script type=&quot;math/tex&quot;&gt;T^2 X&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;TX&lt;/script&gt;.
    &lt;ul&gt;
      &lt;li&gt;Notice that both &lt;a href=&quot;https://en.wikipedia.org/wiki/Functor#Definition&quot;&gt;functor&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_transformation#Definition&quot;&gt;natural transformation&lt;/a&gt; obey certain constraints/equations/axioms, which are not listed here.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Finally, our &lt;script type=&quot;math/tex&quot;&gt;\eta&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; satisfies two additional coherence conditions, expressed via commutative diagrams:&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\array{
    \phantom{\mu T} T^3 &amp; \stackrel{T \mu}\longrightarrow &amp; T^2 \\
    ^{\mu T}\downarrow  &amp;                                 &amp; \downarrow^\mu \\
    \phantom{\mu T} T^2 &amp; \stackrel{\mu}\longrightarrow   &amp; T
}
\qquad
\array{
	\phantom{T \eta} T   &amp; \stackrel{\eta T}\longrightarrow &amp; T^2 \\
	^{T \eta} \downarrow &amp; \searrow^\text{id}               &amp; \downarrow^\mu \\
	\phantom{T \eta} T^2 &amp; \stackrel{\mu}\longrightarrow    &amp; T
} %]]&gt;&lt;/script&gt;

&lt;p&gt;As many people/articles/tutorials have observed, these laws look a lots like the identity and associativity law of an algebra (say a group):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;(Identity) For all &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;0 + x = x + 0 = x&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;(Associativity) For all &lt;script type=&quot;math/tex&quot;&gt;x, y, z&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;x + (y + z) = (x + y) + z&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will in time comes to a fuller understanding of this point, through multiple rounds of seeing this play out in different level of abstractions.&lt;/p&gt;

&lt;p&gt;Before moving on, here’s a technical aside (included since we’ll assume knowledge of this bit when doing proofs later on in this post): the notation mixing functor and natural transform above is a shorthand. Suppose &lt;script type=&quot;math/tex&quot;&gt;\epsilon: F \Rightarrow G&lt;/script&gt; is a natural transform from &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt;, and let &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; be another functor. Then &lt;script type=&quot;math/tex&quot;&gt;H\epsilon&lt;/script&gt; means applying the functor &lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt; to the arrow &lt;script type=&quot;math/tex&quot;&gt;FX \stackrel{\epsilon_X}\longrightarrow GX&lt;/script&gt; to get &lt;script type=&quot;math/tex&quot;&gt;H(FX) \stackrel{H \epsilon_X}\longrightarrow H(GX)&lt;/script&gt;. Meanwhile, &lt;script type=&quot;math/tex&quot;&gt;\epsilon H&lt;/script&gt; actually means the natural transform applied at the object &lt;script type=&quot;math/tex&quot;&gt;HX&lt;/script&gt; instead of &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, i.e. &lt;script type=&quot;math/tex&quot;&gt;F(HX) \stackrel{\epsilon_{HX}}\longrightarrow G(HX)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;We still need to connect this formal definition to our earlier motivation of composing adjoint functors. In fact there is a general construction to get a monad from any adjoint functors. &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; is just &lt;script type=&quot;math/tex&quot;&gt;G \circ F&lt;/script&gt; as mentioned before. The unit is just the unit in the adjunction. The join operation is obtained by applying the counit to &lt;script type=&quot;math/tex&quot;&gt;T^2&lt;/script&gt;, that is: &lt;script type=&quot;math/tex&quot;&gt;T^2 = (GF)(GF) = G(FG)F \longrightarrow G \operatorname{1}_{\mathcal{D}} F = GF = T&lt;/script&gt;. (While this general construction works, I can’t get a satisfactory interpretation in the context of computational model. So I’ll take a detour and interpret a different, but equivalent formulation of Monad in part 4)&lt;/p&gt;

&lt;p&gt;Now let’s interpret this using the example of free algebra vs forgetful functors. &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; simply map any set &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; to the underlying set of its free algebra &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt;, and maps function between set to the naturally induced map between their corresponding free algebra, as usual. The unit provides the embedding of the original set &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; into the free algebra(‘s underlying set). The really non-trivial part is the join operation. Notice that &lt;script type=&quot;math/tex&quot;&gt;T^2X&lt;/script&gt; is a set consisting of algebraic expression of algebraic expression over &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;. If this is befuddling, we can also say that it is an algebraic expression where one layer of variable definition is allowed. For example:
If &lt;script type=&quot;math/tex&quot;&gt;X = \{ x, y, z \}&lt;/script&gt;, then let &lt;script type=&quot;math/tex&quot;&gt;p = 2x+1, q=x-y+3z, r=y^2 + xz&lt;/script&gt;, and let the final expression be &lt;script type=&quot;math/tex&quot;&gt;p^2 - q + 2r&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Now there is an obvious way to simplify this: just (partially) evaluate it by substitution: &lt;script type=&quot;math/tex&quot;&gt;(2x+1)^2 - (x-y+3z) +2(y^2 + xz) = \ldots&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;We can see how this is related to the general construction of the join operation: Recalling that an expression evaluator is possible in any algebra (and given by the counit), a substitution evaluator is really just a plain evaluator over the free algebra &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt;, so we have &lt;script type=&quot;math/tex&quot;&gt;FGF(X) \longrightarrow F(X)&lt;/script&gt;. Now simply apply forgetful functor on both sides.&lt;/p&gt;

&lt;h2 id=&quot;kleisli-category&quot;&gt;Kleisli Category&lt;/h2&gt;
&lt;p&gt;We use monad in practise instead of adjunction when programming because it is difficult to specify an entirely new computational model, while it is “easy” (in the sense of not having to leave your current programming environment) to implement things within the current computational model. While our conceptual picture is that of constructing/deriving a monad from an adjunction, we can still ask the converse question: does every monad arise from/implies an adjunction?&lt;/p&gt;

&lt;p&gt;Happily, it turns out the answer is a resounding “Yes”. In fact there is a family of possible adjunctions that compose to the same monad. Even more luckily, there is both a minimal and maximal such adjunctions, and they are the minimal, &lt;a href=&quot;https://en.wikipedia.org/wiki/Kleisli_category&quot;&gt;Kleisli category&lt;/a&gt; consisting of just the free algebra, versus the maximal, &lt;a href=&quot;https://en.wikipedia.org/wiki/F-algebra&quot;&gt;Eilenberg-Moore category&lt;/a&gt; of all algebra. We will look at both in turns.&lt;/p&gt;

&lt;p&gt;Suppose that we just assume the existence of any such adjunction, without knowing what the other category &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}&lt;/script&gt; is (nor the individual functors &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt;). Further assume that they are really just some form of Free algebra/Forgetful functors. At the very least, &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}&lt;/script&gt; must contain the image of &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; over &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt;, which are all the free algebras. Since we don’t really know what &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; is, we will just let any object &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt; stands for an unknown object &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt;. &lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; Hence we can let the set of objects in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}_{\text{min}}&lt;/script&gt; be just all the objects in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Now how about the morphisms? &lt;em&gt;Prima facie&lt;/em&gt;, they should really be just the algebra’s homomorphisms, i.e. &lt;script type=&quot;math/tex&quot;&gt;{\operatorname{Hom}}_{\mathbf{Alg}}(FX, FY)&lt;/script&gt;, and composition of morphism is just ordinary composition of function. However we can’t do that since we don’t directly know &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt;. Instead we need to do so indirectly by expressing them in terms of things we have direct access to only. So appealing to the Hom-adjunction property of an adjunction, we have that that set is naturally isomorphic to &lt;script type=&quot;math/tex&quot;&gt;{\operatorname{Hom}}_{\mathbf{Set}}(X, UFY) = {\operatorname{Hom}}_{\mathbf{Set}}(X, TY)&lt;/script&gt;, and we can just let this latter set be the definition of morphisms between &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;A challenge that remains is to define composition of morphisms. Per the reasoning/interpretation for the Hom-Set adjunction we talked about in &lt;a href=&quot;/fundamentals/2017/08/28/the-monad-tutorial-fallacy-part-one-introduction-prequel.html&quot;&gt;Part 1&lt;/a&gt;, given an arrow &lt;script type=&quot;math/tex&quot;&gt;X \longrightarrow TY&lt;/script&gt; it should be possible to uniquely extend it into a morphism &lt;script type=&quot;math/tex&quot;&gt;TX \longrightarrow TY&lt;/script&gt;. Then we can just compose as usual: &lt;script type=&quot;math/tex&quot;&gt;X \longrightarrow TY \longrightarrow TZ&lt;/script&gt; is an arrow from &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;TZ&lt;/script&gt;, which fits the representation of morphism in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}_{\text{min}}&lt;/script&gt;. In programming this extension operation is called a &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; (After switching order of arguments if necessary and using the curried form). &lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;It turns out that bind can be expressed in terms of a Monad by sending &lt;script type=&quot;math/tex&quot;&gt;X \stackrel{\phi}\longrightarrow TY&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;TX \stackrel{T\phi}\longrightarrow T^2 Y \stackrel{\mu_Y}\longrightarrow TY&lt;/script&gt;. We can prove that this is correct, namely, that the result of extension defined this way, is the same as applying the forgetful functor to the same morphism &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; represented as an honest algebra homomorphism &lt;script type=&quot;math/tex&quot;&gt;{\operatorname{Hom}}_{\mathbf{Alg}}(FX, FY)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;First note that the extended morphism has at least one &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; throughout ( &lt;script type=&quot;math/tex&quot;&gt;UFX \stackrel{UF\phi}\longrightarrow (UF)(UF)Y \stackrel{\mu_Y}\longrightarrow UFY&lt;/script&gt;), so we can strip the outer &lt;script type=&quot;math/tex&quot;&gt;U&lt;/script&gt; (due to functor’s law), and then it suffices to show that the morphism &lt;script type=&quot;math/tex&quot;&gt;FX \stackrel{F\phi}\longrightarrow FUFY \stackrel{\eta_{FY}}\longrightarrow FY&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; mapped by the natural isomophism between &lt;script type=&quot;math/tex&quot;&gt;{\operatorname{Hom}}_{\mathbf{Set}}(X, UFY)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;{\operatorname{Hom}}_{\mathbf{Alg}}(FX, FY)&lt;/script&gt;. Now note that by category theory, the counit &lt;script type=&quot;math/tex&quot;&gt;\eta_{FY}&lt;/script&gt; is really just the identity on &lt;script type=&quot;math/tex&quot;&gt;UFY&lt;/script&gt; mapped through the natural isomorphism, and that by naturality’s commutative diagram, pre-composing it with &lt;script type=&quot;math/tex&quot;&gt;F\phi&lt;/script&gt; is then the same as just pre-composing &lt;script type=&quot;math/tex&quot;&gt;\text{id}_{UFY}&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; (which is then still &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt;), and then applying the natural isomorphism, and so we are done.&lt;/p&gt;

&lt;p&gt;If this is too dense, a rough sketch of the proof is that the counit (expression evaluator) extend to the identity, and that since extension is basically just the natural isomophism of an adjunction, we can indirectly get what we want by applying the counit and relying on the “commutative” property of extension.&lt;/p&gt;

&lt;p&gt;For the case of actual free algebra, what this operation amount to is to first induce a map from the free algebras generated by &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;TY&lt;/script&gt; by considering &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; as just an honest map between sets (ignoring the structures in &lt;script type=&quot;math/tex&quot;&gt;TY&lt;/script&gt;), and then collapse the nested algebraic expression that results by substitution.&lt;/p&gt;

&lt;p&gt;Before moving on we want to check that composition defined this way is associative. Since the composition is built out of the extension operator, we only need to check the following:
&lt;script type=&quot;math/tex&quot;&gt;(g^* \circ f)^* = g^* \circ f^*&lt;/script&gt; (Which can be seen as an indirect form of idempotency. It cannot be stated directly because the extension operator cannot be applied to the same function twice)&lt;/p&gt;

&lt;p&gt;We compute&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray} 
(g^* \circ f)^* &amp;=&amp; (X \stackrel{f}\longrightarrow TY \stackrel{g^*}\longrightarrow TZ)^* \\
&amp;=&amp; T \left( X \stackrel{f}\longrightarrow TY \stackrel{g^*}\longrightarrow TZ \right) \stackrel{\mu_Z}\longrightarrow TZ \\
&amp;=&amp; TX \stackrel{Tf}\longrightarrow T^2 Y \stackrel{Tg^*}\longrightarrow T^2 Z \stackrel{\mu_Z}\longrightarrow TZ
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;Now since &lt;script type=&quot;math/tex&quot;&gt;g^*&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;TY \stackrel{Tg}\longrightarrow T^2 Z \stackrel{\mu_Z}\longrightarrow TZ&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;Tg^*&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;T^2 Y \stackrel{T^2 g}\longrightarrow T^3 Z \stackrel{T \mu_Z}\longrightarrow T^2 Z&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;We can use the associativity of &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt;, and then the naturality of &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt;, to change to&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
&amp;&amp; TX \stackrel{Tf}\longrightarrow \left( T^2 Y \stackrel{T^2 g}\longrightarrow T^3 Z \stackrel{T \mu_Z}\longrightarrow T^2 Z \right) \stackrel{\mu_Z}\longrightarrow TZ \\
&amp;=&amp; TX \stackrel{Tf}\longrightarrow T^2 Y \stackrel{T^2 g}\longrightarrow \left( T^3 Z \stackrel{\mu_{TZ}}\longrightarrow T^2 Z \stackrel{\mu_Z}\longrightarrow TZ \right) \\
&amp;=&amp; TX \stackrel{Tf}\longrightarrow \left( T^2 Y \stackrel{\mu_Y}\longrightarrow T Y \stackrel{Tg}\longrightarrow T^2 Z \right) \stackrel{\mu_Z}\longrightarrow TZ \\
&amp;=&amp; g^* \circ f^*
\end{eqnarray} %]]&gt;&lt;/script&gt;

&lt;p&gt;as desired.&lt;/p&gt;

&lt;p&gt;We can also reconstruct &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; from the monad &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; using Kleisli Category, and it is mostly common sense. &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; should just send any object in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt; to the same object in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}_{\text{min}}&lt;/script&gt; (due to the way we relabel things). Morphisms in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt; can be embedded in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}_{\text{min}}&lt;/script&gt; by just composing with the unit, aka &lt;script type=&quot;math/tex&quot;&gt;X \stackrel{f}\longrightarrow Y \stackrel{\mu_Y}\longrightarrow TY&lt;/script&gt;. (Check that this is a functor!) Similarly, to forget things, &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}_{\text{min}}&lt;/script&gt;, which represent &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt;, should be sent to &lt;script type=&quot;math/tex&quot;&gt;UF(X) = TX&lt;/script&gt;. Morphisms in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}_{\text{min}}&lt;/script&gt;, say &lt;script type=&quot;math/tex&quot;&gt;X \stackrel{g}\longrightarrow TY&lt;/script&gt;, will need to sent to some function of type &lt;script type=&quot;math/tex&quot;&gt;TX \longrightarrow TY&lt;/script&gt;. So we just apply the extension operator since it is unique anyway.&lt;/p&gt;

&lt;h2 id=&quot;eilenberg-moore-category&quot;&gt;Eilenberg-Moore Category&lt;/h2&gt;
&lt;p&gt;At the opposite extreme, suppose we want to construct the category of all “algebra”. The challenge here is that we need to specify it without referring to anything internal to the objects itself (say, the addition operation in abelian groups), since for the construct to be general we must not make any assumption on what kinds of objects they are actually. Instead we can try to appeal to the interrelationship between objects. This kind of approach to generalizing things beyond their original context/example is known as “categorification” in mathematics.&lt;/p&gt;

&lt;p&gt;So an algebra is just a set with all the algebraic operation specified over that set. Per the remarks above we are not allowed to refer to the actual algebra, although we can refer to the underlying sets. (As they are in category &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt;) Recalling what we said in &lt;a href=&quot;/fundamentals/2017/08/28/the-monad-tutorial-fallacy-part-one-introduction-prequel.html&quot;&gt;part 1&lt;/a&gt;, a cunning trick to recover the algebra is to specify an expression evaluator instead. (This works because expression encompass and generalize algebraic operation. For example, to fully specify &lt;script type=&quot;math/tex&quot;&gt;+&lt;/script&gt;, it suffices to know the value of the expression &lt;script type=&quot;math/tex&quot;&gt;a + b&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; can range over everything in &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;) This we can do: objects in our category &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}_\text{max}&lt;/script&gt; is just an arrow &lt;script type=&quot;math/tex&quot;&gt;TX \stackrel{\alpha}\longrightarrow X&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; is in &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt;. Here &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; is the underlying set, &lt;script type=&quot;math/tex&quot;&gt;TX&lt;/script&gt; is a free algebra whose elements are all the expressions, and the morphism is then the evaluator (it maps expression over &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; to value in &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; again).&lt;/p&gt;

&lt;p&gt;However, the formulation here is too loose: we must somehow ensure that the evaluator is valid, that it obey the algebra’s laws/axioms. Part of this work is already done by the free algebra construct hidden within &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;, since expressions that are provably identical using the axioms of the algebra are quotiented out (i.e. identified) in &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt;. The remaining part is a baggage brought on by the fact that &lt;script type=&quot;math/tex&quot;&gt;TX&lt;/script&gt;, as a free algebra, has extra structures not present when we are just talking about the value of &lt;script type=&quot;math/tex&quot;&gt;a + b&lt;/script&gt; (with &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; mere values and not expressions).&lt;/p&gt;

&lt;p&gt;To do this we appeal to the monad, again applying the idea that expression generalize algebraic operation. Namely, we require the following diagram commutes:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\array{
	T^2 X            &amp; \stackrel{T \alpha}\longrightarrow &amp; TX \\
	\downarrow^{\mu} &amp;                                    &amp; \downarrow^{\alpha} \\
	TX               &amp; \stackrel{\alpha}\longrightarrow   &amp; X
}
\qquad
\array{
	X &amp; \stackrel{\eta}\rightarrow  &amp; TX \\
	  &amp; {}_{\text{id}} \searrow     &amp; \downarrow^{\alpha} \\
	  &amp;                             &amp; X
} %]]&gt;&lt;/script&gt;

&lt;p&gt;What does it mean? Suppose we have an expression of expression. The two ways to evaluate it would be to either substitute then evaluate (monad join, followed by &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;), or evaluate twice - evaluate the value of intermediate variables first, then evaluate the resulting expression. (&lt;script type=&quot;math/tex&quot;&gt;T \alpha&lt;/script&gt; then &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;) They should obviously be the same. As an example, let &lt;script type=&quot;math/tex&quot;&gt;u = x + 2y&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;v = y - z&lt;/script&gt;. Suppose that &lt;script type=&quot;math/tex&quot;&gt;x = 3, y = 7, z = 1&lt;/script&gt;. Then &lt;script type=&quot;math/tex&quot;&gt;u = 17, v = 6&lt;/script&gt; and so &lt;script type=&quot;math/tex&quot;&gt;u + v = 23&lt;/script&gt;. On the other hand &lt;script type=&quot;math/tex&quot;&gt;u + v = x + 3y - z&lt;/script&gt;, so the evaluator have to map &lt;script type=&quot;math/tex&quot;&gt;x + 3y - z&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;23&lt;/script&gt; (as this is not otherwise mandated since this expression is different from either &lt;script type=&quot;math/tex&quot;&gt;u&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;TX \longrightarrow X&lt;/script&gt; is just a map from set to set).&lt;/p&gt;

&lt;p&gt;With the basic structure out of the way, specifying homomorphisms between algebra is actually pretty easy. Consider that a hom is a function between the underlying set which must also respect the algebraic structure. In ordinary algebra this is expressed through commutative diagrams for each algebraic operations. For instance:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\require{AMScd}
\begin{CD}
\stackrel{(a, b)}{G \times G}             @&gt;+&gt;&gt; \stackrel{(a + b)}{G} \\
@V{(\phi, \phi)}VV                              @VV{\phi}V \\
\underset{(\phi(a), \phi(b))}{H \times H} @&gt;+&gt;&gt; \underset{\phi(a + b) = \phi(a) + \phi(b)}{H}
\end{CD}&lt;/script&gt;

&lt;p&gt;Because the structure of each algebra is already constrained by the requirement above, we can just naively generalize this diagram, turning the artificial &lt;script type=&quot;math/tex&quot;&gt;G \times G&lt;/script&gt; into the more general set of expression &lt;script type=&quot;math/tex&quot;&gt;TX&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\require{AMScd}
\begin{CD}
T(X)     @&gt;{\alpha}&gt;&gt; X \\
@V{Tf}VV              @VVfV \\
T(Y)     @&gt;{\beta}&gt;&gt;  Y
\end{CD}&lt;/script&gt;

&lt;p&gt;It remains to show that this does indeed form a category, and the main work to do is to check the composition of morphisms. Well, we can just stack the commutative diagram together:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\require{AMScd}
\begin{CD}
T(X)     @&gt;{\alpha}&gt;&gt; X \\
@V{Tf}VV              @VVfV \\
T(Y)     @&gt;{\beta}&gt;&gt;  Y \\
@V{Tg}VV              @VVgV \\
T(Z)     @&gt;{\gamma}&gt;&gt;  Z \\
\end{CD}&lt;/script&gt;

&lt;p&gt;Recalling that our goal is to prove the outer square commutes, we can perform diagram chasing: first note that the arrows &lt;script type=&quot;math/tex&quot;&gt;X \stackrel{f}\longrightarrow Y \stackrel{g}\longrightarrow Z&lt;/script&gt; is the same as &lt;script type=&quot;math/tex&quot;&gt;X \stackrel{g \circ f}\longrightarrow Z&lt;/script&gt;, and by functor’s axiom we can apply &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; to this “equation” to get that the arrow on the left hand side can also be decomposed: &lt;script type=&quot;math/tex&quot;&gt;X \stackrel{T(g \circ f)}\longrightarrow Z&lt;/script&gt; is the same as &lt;script type=&quot;math/tex&quot;&gt;X \stackrel{Tf}\longrightarrow Y \stackrel{Tg}\longrightarrow Z&lt;/script&gt;. Then just apply the commutativity condition for the two inner squares to transform:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(g \circ f) \circ \alpha = g \circ (f \circ \alpha) = g \circ \beta \circ Tf = \gamma \circ Tg \circ Tf = \gamma \circ T(g \circ f)&lt;/script&gt;

&lt;h2 id=&quot;full-circle-back&quot;&gt;Full Circle Back&lt;/h2&gt;
&lt;p&gt;Finally, as free algebra are also algebra, we want to see how the Kleisli category embed into the Eilenberg Moore Category. Well, the underlying set of a free algebra generated by &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; is just &lt;script type=&quot;math/tex&quot;&gt;TX&lt;/script&gt;, so we need an arrow &lt;script type=&quot;math/tex&quot;&gt;T^2 X \longrightarrow TX&lt;/script&gt;. The monad join fits the bill here (and not just because the signature match&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;) Why? Because algebraic operations in a free algebra is in fact defined by the substitution semantics. Anyway we still need to verify the conditions/diagrams for being an algebra. The first diagram is commutative because &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; is a natural transform. The second diagram is just the unit law of monad.&lt;/p&gt;

&lt;p&gt;How about morphism? We need a representation that is of type &lt;script type=&quot;math/tex&quot;&gt;TX \longrightarrow TY&lt;/script&gt; - which means for a morphism &lt;script type=&quot;math/tex&quot;&gt;\phi: X \longrightarrow TY&lt;/script&gt; we should use its extension &lt;script type=&quot;math/tex&quot;&gt;\phi^*&lt;/script&gt;. Then we should check that it is in fact a morphism in the Eilenberg-Moore Category:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\array{
	T^2 X                 &amp; \stackrel{\mu}\longrightarrow   &amp; TX \\
	\downarrow^{T^2 \phi} &amp;                                 &amp; \downarrow^{T \phi} \\
	T^3 Y                 &amp; \stackrel{\mu T}{\cdots\cdots}  &amp; T^2 Y \\
	\downarrow^{T \mu}    &amp;                                 &amp; \downarrow^{\mu} \\
	T^2 Y                 &amp; \stackrel{\mu}\longrightarrow   &amp; TY
} %]]&gt;&lt;/script&gt;

&lt;p&gt;The diagram constructed from &lt;script type=&quot;math/tex&quot;&gt;\phi^*&lt;/script&gt; is shown above (with the obvious step for decomposing &lt;script type=&quot;math/tex&quot;&gt;T(\phi^*)&lt;/script&gt; omitted as it is the same as what we’ve seen before - just use the functor’s law). To prove that it commutes, connect the middle row with the morphism &lt;script type=&quot;math/tex&quot;&gt;\mu T&lt;/script&gt;. Then the bottom square commutes by the multiplication law of monad, while the upper square commutes due to &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; being a natural transform. Then we’re done by performing the usual diagram chasing.&lt;/p&gt;

&lt;p&gt;Incidentally, this provide an alternative proof that the extension operator is correct: as extension is unique, we only need to ensure that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The extended morphism remains the same on &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;It is a homomorphism on &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}&lt;/script&gt; and not just &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The argument above amount to showing 2. For 1, we precompose with the unit:
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{eqnarray}
&amp;&amp;X \stackrel{\eta}\longrightarrow TX \stackrel{T \phi}\longrightarrow T^2 Y \stackrel{\mu}\longrightarrow TY \\
&amp;=&amp; X \stackrel{\phi}\longrightarrow TY \stackrel{\eta}\longrightarrow T^2 Y \stackrel{\mu}\longrightarrow TY \text{(unit is natural)} \\
&amp;=&amp; X \stackrel{\phi}\longrightarrow TY.
\end{eqnarray} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;one-more-thing&quot;&gt;One more thing…&lt;/h2&gt;

&lt;p&gt;Right when I’m doing the final editing I come across &lt;a href=&quot;http://blog.sigfpe.com/2009/12/where-do-monads-come-from.html&quot;&gt;this&lt;/a&gt; and at a glance the approach it took looks similar to what I did here (free algebra/algebraic expression, that kind of stuff), although I took a pure math approach in case you’re too thick :P.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Monad Series: To be continued…)&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;This does not mean that the adjunction construct is not algebraic - in fact a Category can be thought of as a groupoid, where elements can be multiplied provided their domain/co-domain match. Then an ordinary group is just a groupoid with only one domain so that anything can be multiplied with anything.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;But I can’t resist the temptation to include a Matrix quote:&lt;/p&gt;
      &lt;blockquote&gt;
        &lt;p&gt;The Matrix is everywhere. It is all around us. Even now, in this very room. You can see it when you look out your window or when you turn on your television. You can feel it when you go to work… when you go to church… when you pay your taxes. It is the world that has been pulled over your eyes to blind you from the truth.&lt;/p&gt;

        &lt;p&gt;…&lt;/p&gt;

        &lt;p&gt;Unfortunately, no one can be…told what the Matrix is. You have to see it for yourself.&lt;/p&gt;

        &lt;p&gt;Morpheus, The Matrix (1999)&lt;/p&gt;
      &lt;/blockquote&gt;
      &lt;p&gt;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;But fear not, for the Haskell community recognized this problem long ago (How can they not when you have endless waves of people asking about Monad?), and I think somewhere, nice and smart people are trying to find a better way. For example, see &lt;a href=&quot;https://www.slideshare.net/linecorp/the-monad-fear&quot;&gt;this presentation&lt;/a&gt;.&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;But Haskell also has something similar - template. See &lt;a href=&quot;https://www.reddit.com/r/haskell/comments/61r64w/what_does_the_free_monad_offer_that_macros_dont/&quot;&gt;this&lt;/a&gt; for an advocacy.&amp;nbsp;&lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;Those not coming from a math/abstract algebra background may find this strange. Rest assured it is a culturally standard practise in math. One of the very first thing you learn in university algebra is that the actual name/label given to things in a set doesn’t matter - so long as you always get the right things when called upon to. (In fact recall that the definition of a Category doesn’t really require looking into the &lt;em&gt;content&lt;/em&gt; of an object) So using &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; instead of the actual &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt; doesn’t hurt - given such a label we can get back the real things, metaphorically, by applying the functor &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt;.&amp;nbsp;&lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;The naming here may look strange. It will look much more “natural” (no pun intended) when doing actual programming where we care about actually applying those functions.&amp;nbsp;&lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;A gripe I have with the statically typed camp of programming, even for the sufficiently-advanced-type-that-offer-automatic-safety-guarantee, is that placing too much focus on the type risks crowding out my cognitive capacity to understand the actual semantics of a piece of code. It takes discipline to resist the temptation to consider a function correct just because the signature match.&amp;nbsp;&lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">(Go to Part 1 of this series) In part 2 of this series we explain the technical core of the theory of Monad. Of central importance is the attempt to provide algebraic interpretation of everything, as well as to convert things into suitably algebraic structures. We will also revisit this issue at an arguably “better” (but more advanced) angle in part 5. While the picture for an adjunction is relatively clear, it suffers from needing to work with two categories at the same time. Monad fixes this by composing the left and right adjoint functors into an endofunctor , over a single category. An additional advantage with this construction is that it is more algebraic as it is now composable: we can iterate to get , etc for example.</summary></entry><entry><title type="html">A Quick Note on the Clojure (Backend) Web Space</title><link href="https://lemonteaa.github.io/misc/2017/09/14/a-quick-note-on-the-clojure-backend-web-space.html" rel="alternate" type="text/html" title="A Quick Note on the Clojure (Backend) Web Space" /><published>2017-09-14T20:16:00+08:00</published><updated>2017-09-14T20:16:00+08:00</updated><id>https://lemonteaa.github.io/misc/2017/09/14/a-quick-note-on-the-clojure-backend-web-space</id><content type="html" xml:base="https://lemonteaa.github.io/misc/2017/09/14/a-quick-note-on-the-clojure-backend-web-space.html">&lt;p&gt;&lt;em&gt;(Last Updated on 16 Sep 2017. Thanks nha, gsnewmark and danielcompton for corrections and discussions!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note to Experts: if you find any factual error in this note, please tell me by leaving a comment in the comment section below. Many thanks!)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;frameworks&quot;&gt;Frameworks&lt;/h2&gt;
&lt;p&gt;Clojure as a community has emphasized two points (among others):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;No complicated, Rube-Goldberg-Machine framework - prefer simple, focused, composable libraries for specific features. Pick your own choice for each feature and combine them in your application.&lt;/li&gt;
  &lt;li&gt;Data is a first-class-citizen. Instead of coupling it with function, let it stand alone and have functions operating on/transforming them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That being said it is tedious and intimidating for a rookie to have to make informed choice on every step. So there is still some “frameworks”:
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.luminusweb.net/&quot;&gt;Luminus&lt;/a&gt; is a funky thing: while it is called a “micro framework” on its webpage, if you look closer you will find nothing beyond the series of guide webpages. It is not even a library! Instead it is just a lein template you can call to scaffold a web project with sensible default choices of libraries (per point 1 above) and all the tedious configuration done for you.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://arachne-framework.org/&quot;&gt;Arachne&lt;/a&gt; (still in alpha) is more opinionated and co-opt point 2 above: the app is data-driven and the kind of messy configurations so common in other web framework (in other languages) are “real data” and given first-class, systematic/unified treatment. (Similar project and/or successor on this line is the &lt;a href=&quot;https://github.com/duct-framework/duct&quot;&gt;Duct&lt;/a&gt; framework)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://clojure-liberator.github.io/liberator/&quot;&gt;Liberator&lt;/a&gt; is more a library targeted to those who want to write a RESTful web service backend. It has put heavy emphasis on fully embracing the doctrine of REST - even those that are less adhered to in practise (&lt;a href=&quot;http://timelessrepo.com/haters-gonna-hateoas&quot;&gt;HATEOAS&lt;/a&gt; comes to mind). It seems that its more pragmatic, &lt;em&gt;asynchronous&lt;/em&gt; counterpart - &lt;a href=&quot;http://pedestal.io/&quot;&gt;Pedestal&lt;/a&gt; - has more adoption in the real world.
    &lt;ul&gt;
      &lt;li&gt;Continuing along the same line, &lt;a href=&quot;https://github.com/juxt/yada&quot;&gt;yada&lt;/a&gt; combine characteristics from both framework above: it provide comprehensive supports for HTTP semantics, &lt;em&gt;and&lt;/em&gt; is asynchronous. &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Notes however that at this moment it only supports Aleph (with plan to supports other in the future).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;build-tools&quot;&gt;Build Tools&lt;/h2&gt;
&lt;p&gt;Just in case you don’t know (yet), there are two:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://leiningen.org/&quot;&gt;Leiningen&lt;/a&gt; (lein in short) is the standard one and is a task runner, declarative project configuration, and dependency management combined (sort of like Maven if you’re in Java, npm if you’re from Javascript, rake if you’re in Ruby I think(?), XX if you’re from language YY - really most modern languages nowadays have this particular combination as the default)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://boot-clj.com/&quot;&gt;Boot&lt;/a&gt; is (ironically) the new kid on the block and pursue a procedural style that allows more flexibility/programmability. (E.g. Just Ant for Java, or Gulp over Grunt for Javascript guy - I know, that two are ancient in 2017, but still)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;servers&quot;&gt;Servers&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;(I assume you have the Java background to understand, well, the Java part. If not, well that’s too bad - wait until my planned next post where I will briefly talk about that in a tangential subsection :P )&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Of course two “universal” deployment options are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Build an uberjar that is completely standalone (web application is packaged with an embedded web server) and then just execute it on the JVM&lt;/li&gt;
  &lt;li&gt;Build an (Servlet-compliant) uberwar and deploy it into any Java web server / web container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately thing starts to get unruly at this point, so tighten your seat belt…&lt;/p&gt;

&lt;p&gt;While Servlets are a good thing &lt;em&gt;in spite of&lt;/em&gt; how it might be &lt;a href=&quot;http://misko.hevery.com/2009/04/08/how-to-do-everything-wrong-with-servlets/&quot;&gt;badly designed&lt;/a&gt;, by abstracting away differences between web/application servers and presenting a uniform interface to application developer, maintaining this kind of standard (especially in Java) pretty much ensure that it will be slow to pick up on innovation in the web server space. But the rise of asynchronous web servers such as Node.js and other emerging forms of interaction (such as websockets) put on pressure for adoption. When the standard fails to adapt &lt;em&gt;fast enough&lt;/em&gt; (Newer version of the Servlet spec has support for them), people will begin to work around (and hence without) it. So instead of a unified interface, expects custom API specific to each web server.&lt;/p&gt;

&lt;p&gt;Another trend that may be unfamiliar to people used to working in an enterprise context is the rise of embedded server. &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; It is interesting to note a kind of &lt;em&gt;Inversion of Control&lt;/em&gt; here: instead of deploying an application to the container/server and letting the server’s execution manage starting/stopping the app, we now have explicit control: the application contains the server and triggers the start/stop of the server through application logic. &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; One advantage of this approach is that the &lt;em&gt;implicit&lt;/em&gt; logic of a server managing a deployment is now &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/&quot;&gt;&lt;em&gt;explicit&lt;/em&gt;&lt;/a&gt; so that when problem occurs, things are more traceable.&lt;/p&gt;

&lt;p&gt;So, with these understanding, what clojure-specific web servers do we have?&lt;/p&gt;

&lt;p&gt;First, &lt;a href=&quot;https://github.com/ring-clojure/ring&quot;&gt;ring&lt;/a&gt; is the Clojure analogue of the Servlet spec. It is &lt;em&gt;a HTTP server abstraction/interface plus a number of small libraries&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.http-kit.org/&quot;&gt;http-kit&lt;/a&gt; is a ring-compatible web server written in Java and Clojure.&lt;/li&gt;
  &lt;li&gt;Jetty and Netty are classical Java web servers. Jetty is a standard, embedded Java server, while Netty is closer to Node.js with emphasis on the Transport Layer by providing access to TCP/UDP/socket server as well as supporting asynchronity.
    &lt;ul&gt;
      &lt;li&gt;Ring itself has an adaptor for Jetty, and that’s an (easy) default choice in some contexts.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://aleph.io/&quot;&gt;Aleph&lt;/a&gt; is a server that’s a thin wrapper over Netty. It can also acts as drop-in replacement for any ring-compliant server.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://immutant.org/&quot;&gt;Immutant&lt;/a&gt; is a more heavyweight library/server that includes other services needed for more sophisticated system (messaging queue for instance). It can be deployed to either Java’s WildFly or since 2.x the &lt;a href=&quot;http://undertow.io/&quot;&gt;Undertow&lt;/a&gt; web server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;libraries&quot;&gt;Libraries&lt;/h2&gt;
&lt;p&gt;There are just too many of them to discuss here. Instead I just highlight some of the foundational ones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For something similar to dependency injection in Java, we’ve got application lifecycle/state management libraries: &lt;a href=&quot;https://github.com/stuartsierra/component&quot;&gt;Component&lt;/a&gt; vs &lt;a href=&quot;https://github.com/tolitius/mount&quot;&gt;Mount&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;For the routing part of your typical/classical MVC framework, we’ve got &lt;a href=&quot;https://github.com/stuartsierra/component&quot;&gt;Compojure&lt;/a&gt; vs just plain &lt;a href=&quot;https://github.com/ring-clojure&quot;&gt;ring&lt;/a&gt; (Remember ring is an API + a collection of libraries) vs &lt;a href=&quot;https://github.com/juxt/bidi&quot;&gt;bidi&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;and-one-more-thing&quot;&gt;And One More Thing…&lt;/h2&gt;
&lt;p&gt;I haven’t mentioned database in this post so far. Well of course you can use any as long as JDBC supports it… database is not usually tied to a particular programming language. But since we’re talking about clojure, it is criminal not to mention &lt;a href=&quot;http://www.datomic.com/&quot;&gt;Datomic&lt;/a&gt;, a &lt;a href=&quot;http://augustl.com/blog/2016/datomic_the_most_innovative_db_youve_never_heard_of/&quot;&gt;super-innovative&lt;/a&gt; “database” made by &lt;a href=&quot;https://cognitect.com/&quot;&gt;Cognitect&lt;/a&gt; (if it can be called that, per the talks by Rick on the &lt;a href=&quot;https://www.infoq.com/presentations/Datomic-Database-Value&quot;&gt;Database-as-a-value&lt;/a&gt;). Unfortunately, it is one of the rare infrastructural piece of software in our ecosystem that is not Open Source nor free (they have a free version, but it has &lt;a href=&quot;https://my.datomic.com/downloads/free&quot;&gt;restrictions&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;Thanks Google! (and the people in the Clojure community ;) )&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/clojure/9nsVazn44u0&quot;&gt;Announcing Aleph&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=1498198&quot;&gt;Discussion on HN&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.booleanknot.com/blog/2017/05/09/advancing-duct.html&quot;&gt;Advancing Duct&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://adambard.com/blog/i-finally-get-boot/&quot;&gt;My first time using boot over leiningen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5385407/whats-the-difference-between-jetty-and-netty&quot;&gt;Differences between Jetty vs Netty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/167262/how-do-you-make-a-web-application-in-clojure/32165654#32165654&quot;&gt;Discussion on Clojure web servers on stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;See their &lt;a href=&quot;https://github.com/juxt/yada/blob/master/dev/resources/comparison-guide.md&quot;&gt;wiki&lt;/a&gt; for their own assesement/comparison of yada vs Liberator and Pedestal. Also see their &lt;a href=&quot;https://juxt.pro/blog/posts/yada-1.html&quot;&gt;blog post&lt;/a&gt; for a sales pitch.&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;My own pet theory: Ever heard of DevOps? Instead of externalising config and dependent systems with a dedicated, separate team to manage them, why not put everything back to the hands of developer with the same powerful set of tool - general purpose programming language - to manage config? Really nice for lone wolf developer… the operation department, not so much.&amp;nbsp;&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;I will confess to having personal prejudice that embedded server are somehow slower: no they are not &lt;em&gt;a priori&lt;/em&gt; slow. How could it be? Afterall web/application server are just codes, and where exactly are those code executed does not affect its performance.&amp;nbsp;&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">(Last Updated on 16 Sep 2017. Thanks nha, gsnewmark and danielcompton for corrections and discussions!) (Note to Experts: if you find any factual error in this note, please tell me by leaving a comment in the comment section below. Many thanks!) Frameworks Clojure as a community has emphasized two points (among others): No complicated, Rube-Goldberg-Machine framework - prefer simple, focused, composable libraries for specific features. Pick your own choice for each feature and combine them in your application. Data is a first-class-citizen. Instead of coupling it with function, let it stand alone and have functions operating on/transforming them. That being said it is tedious and intimidating for a rookie to have to make informed choice on every step. So there is still some “frameworks”:</summary></entry><entry><title type="html">The Monad Tutorial Fallacy, Part One: Introduction/Prequel</title><link href="https://lemonteaa.github.io/fundamentals/2017/08/28/the-monad-tutorial-fallacy-part-one-introduction-prequel.html" rel="alternate" type="text/html" title="The Monad Tutorial Fallacy, Part One: Introduction/Prequel" /><published>2017-08-28T22:56:00+08:00</published><updated>2017-08-28T22:56:00+08:00</updated><id>https://lemonteaa.github.io/fundamentals/2017/08/28/the-monad-tutorial-fallacy-part-one-introduction-prequel</id><content type="html" xml:base="https://lemonteaa.github.io/fundamentals/2017/08/28/the-monad-tutorial-fallacy-part-one-introduction-prequel.html">&lt;p&gt;Understanding how monad works is a kind of mandatory rite of passage for any programmer aspiring to truly master the functional paradigm (of the advanced statically typed kind). Unfortunately it is an unforgiving trial: in spite of the large amount of tutorials out there the construction itself just seem to have some kind of irreducible complexity whose reason is mostly opaque to neophytes.&lt;/p&gt;

&lt;p&gt;Interestingly, although I mainly studied math when I was an undergrad, I first came to learn monad through the usual programmer’s way - see some hand-wavy explanation of what it is/does, see introductory examples of monads, read the abstract interface, read (and try to understand) more examples, struggle, then “think” that I understood it, realize (a few months to a year later) that I haven’t - that I have missed some facet of it, rinse and repeat, despair at some point that I am probably never going to truly master it…
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Until I study monad from the perspective of a pure mathematician with no thought given to applications. Then everything clicked. “Why don’t you tell me this earlier?”&lt;/p&gt;

&lt;p&gt;So as a service mainly to myself, I’m writing this series of post retracing the story of monad (cleaned up of course). &lt;strong&gt;&lt;em&gt;In clear violation of the warning of the infamous &lt;a href=&quot;https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/&quot;&gt;Monad Tutorial Fallacy&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt; You have been warned.&lt;/p&gt;

&lt;p&gt;In retrospect, the reasons that learning-through-example/pattern didn’t work for me is because:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The pattern emerging from the examples is not the monad itself (at least, not its interface nor its implementation). It is sort of like the mismatch of thinking in the problem domain vs the solution domain.&lt;/li&gt;
  &lt;li&gt;Unlike interface in traditional OOP languages, there are variants of the monad interface(s) with translation “formula” between them - a situation where Haskell typeclass shines but which add confusion to beginners. More importantly, unlike other context where things decompose obviously, the “moving pieces” of the monad interface seems to be tightly coupled to each other and look like the wrong decomposition, so that while it is possible to say understand any of its parts if I focus my mind on it for a while, it is hard to hold a mental conception/model of the whole thing in my head in one piece. Exactly the same situation where understanding a large, interlocking system is scary because you can’t really hold the full picture in your head and have to work on it piece-by-piece, always worrying about possible side effects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Okay, let’s begin the story. &lt;em&gt;(Prerequisite: &lt;del&gt;Bachelor’s degree in Pure Math&lt;/del&gt; Knowledge of some category theory and basic abstract algebra)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Warning to actual mathematician: skipping all proofs as this is a tech blog and not a math blog, and because you can find them elsewhere/do it yourself anyway. Or is it just a lame excuse on my part to not make this post ridiculously long?)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before Monad, there’s the Adjoint Functor. But even that is a pretty mysterious abstraction as impenetrable as the monad. So let’s talk about &lt;del&gt;concrete&lt;/del&gt; prototypical example, which in our story will be the free algebra.&lt;/p&gt;

&lt;p&gt;Recall that given any unstructured set &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, the free algebra generated by &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;/over &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, denoted &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt;, is the algebra formed by taking all formal expressions over &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; with the obvious algebraic operations, and where elements are identified if and only if they can be proved to be identities under the axioms of the algebraic system we are using. (So &lt;script type=&quot;math/tex&quot;&gt;a+(b+c)&lt;/script&gt; is the same element as &lt;script type=&quot;math/tex&quot;&gt;(a+b)+c&lt;/script&gt;.) The intuition for this construction is that it is a tautological one: the formal expressions represent things that simply have to exists in any algebra containing &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; (e.g. If &lt;script type=&quot;math/tex&quot;&gt;a, b&lt;/script&gt; are in &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, and we have some algebra &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; containing &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, then necessarily &lt;script type=&quot;math/tex&quot;&gt;a + b&lt;/script&gt; is in &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; by closure law), and then we impose the minimal constraint on the generated algebra by identifying only what have to be (those that can be proved to be equivalent).&lt;/p&gt;

&lt;p&gt;Now the categorical way to think of free algebra is that they are a universal construction: There is an obvious embedding &lt;script type=&quot;math/tex&quot;&gt;\iota&lt;/script&gt; of &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt;, and for any other algebra &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; that contains &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; (through the embedding &lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt;), we always have an unique homomorphism &lt;script type=&quot;math/tex&quot;&gt;\phi: F(X) \rightarrow Y&lt;/script&gt; so that the diagram below commutes:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\array{
    X &amp; \stackrel{\iota}\rightarrow &amp; F(X) \\
      &amp; {}_g \searrow       &amp; \downarrow^\phi \\
      &amp;                     &amp; Y
} %]]&gt;&lt;/script&gt;

&lt;p&gt;If you actually read category theory textbook you may find the above diagram doesn’t look quite right: the problem is that we have been a bit loose and didn’t clearly distinguish which object belongs in which category: we can’t really just say &lt;script type=&quot;math/tex&quot;&gt;X \rightarrow F(X)&lt;/script&gt; as &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; is in the category of set, while &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt; is in the category of algebra. We can fix this (at the cost of making the diagram more complicated looking) by using the forgetful functor &lt;script type=&quot;math/tex&quot;&gt;G: \mathbf{Algebra} \rightarrow \mathbf{Set}&lt;/script&gt;, which just stripe away all the algebraic operations, leaving only the set of elements. So the embedding become: &lt;script type=&quot;math/tex&quot;&gt;I: X \rightarrow GF(X)&lt;/script&gt; as a map/morphism between sets. And voila - this is the natural transformation called &lt;strong&gt;the unit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is also a nifty idea that will become critical later on: adjoint functor is a theory of duality, and whenever there is such an adjunction the properties outlined above also work if we flip all the arrows (i.e. take the dual in category-speak). In particular there would naturally be a morphism &lt;script type=&quot;math/tex&quot;&gt;E: FG(A) \rightarrow A&lt;/script&gt; for any algebra &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;, called &lt;strong&gt;the counit&lt;/strong&gt;. But what is this? &lt;script type=&quot;math/tex&quot;&gt;FG(A)&lt;/script&gt; is the free algebra whose underlying elements are &lt;script type=&quot;math/tex&quot;&gt;G(A)&lt;/script&gt;, or just the elements of &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;. So &lt;script type=&quot;math/tex&quot;&gt;FG(A)&lt;/script&gt;’s elements are formal expressions, where all those variables take values in &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;, &lt;em&gt;where algebraic operations are well defined since &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; is an algebra&lt;/em&gt;. &lt;strong&gt;E is an expression evaluator!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But there’s still one thing more (at least). The duality/symmetry of an adjunction become apparent once we express it in terms of a &lt;em&gt;natural&lt;/em&gt; isomorphism between two hom-sets. (In fact this representation is the key ingredient in the proof of the duality mentioned above anyway) Packaged up in a nice formula, it reads: &lt;script type=&quot;math/tex&quot;&gt;{\operatorname{Hom}}_{\mathbf{Algebra}}(FX, Y) \cong {\operatorname{Hom}}_{\mathbf{Set}}(X, GY)&lt;/script&gt;. What does it mean? Well, similar to how any linear transformation is uniquely determined by the values it takes on any basis of the source vector space, any homomorphism from the free algebra &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt; to any other algebra &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;, is uniquely determined by the value it takes over a natural basis, which is just the underlying set/set of variables &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;. Equivalently, any such map induces a full homomorphism (and not just a map of sets) over &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt; by the obvious algebra law (e.g. If &lt;script type=&quot;math/tex&quot;&gt;\phi(a) = p&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\phi(b) = q&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;\phi(a + 2b)&lt;/script&gt; can be defined as &lt;script type=&quot;math/tex&quot;&gt;p + 2q&lt;/script&gt;). The reason for the appearance of the forgetful functor &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; is the same as in the discussion on universal property.&lt;/p&gt;

&lt;p&gt;Now we mostly understand Adjoint Functors (excluding the more theory side of things, such as the Special and General Adjoint Functor Theorem for existence/construction of &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; from &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt;), but so what? Here comes the important part: &lt;strong&gt;&lt;em&gt;we can interpret (typed) pure functional programming through category theory&lt;/em&gt;&lt;/strong&gt;, and a suitably comprehension interpretive framework serves as the foundation for understanding monad, among other things.&lt;/p&gt;

&lt;p&gt;In the simplest situation, a Category is a typed version of the composition higher order function. The objects in the Category are the type of the system, morphisms from &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; are the pure (computable) functions of type &lt;script type=&quot;math/tex&quot;&gt;A \rightarrow B&lt;/script&gt;, and composition of arrows (in the category) correspond to function compositions (in our programming model). Even though it appears to be trivial and useless, this naive model can be extended and changed in various way, and you may even specify your own Category/Programming Model! (I promise to give examples of these in Part 3 or something of this series)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Adjoint Functors represents the duality between an unstructured, raw computational model/domain versus a structured, contextual computational model/domain.&lt;/em&gt; So we first design and specify a custom-made Category &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}&lt;/script&gt; (where all its element - object, morphism and composition - need not be the standard/usual one) that capture/model the particular context we want, and Category &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt; remains the standard one in last paragraph. Then the functors &lt;script type=&quot;math/tex&quot;&gt;F: \mathcal{C} \rightarrow \mathcal{D}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;G: \mathcal{C} \leftarrow \mathcal{D}&lt;/script&gt; provides the natural translation between these two contrasting model of computation. In particular &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; is an embedding functor: any computation can be trivially considered as computation with context by simply carrying out all computation without using or depending on the context at all. (In practice though describing &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; is not trivial since category &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}&lt;/script&gt; is itself not trivial) On the other hand, any computation with context is still a computation (Church-Turing thesis), so &lt;script type=&quot;math/tex&quot;&gt;U&lt;/script&gt; interpret it as plain computation by forgetting/stripping away the extra structure (but no information is lost - it is the marking of context, and not the content of the context, that is being stripped). In more silly terms, &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; tells you that you can technically write assembly in any high level (Turing complete) language, while &lt;script type=&quot;math/tex&quot;&gt;U&lt;/script&gt; tells you that ultimately any such high level language will be compiled down into assembly anyway.&lt;/p&gt;</content><author><name></name></author><summary type="html">Understanding how monad works is a kind of mandatory rite of passage for any programmer aspiring to truly master the functional paradigm (of the advanced statically typed kind). Unfortunately it is an unforgiving trial: in spite of the large amount of tutorials out there the construction itself just seem to have some kind of irreducible complexity whose reason is mostly opaque to neophytes. Interestingly, although I mainly studied math when I was an undergrad, I first came to learn monad through the usual programmer’s way - see some hand-wavy explanation of what it is/does, see introductory examples of monads, read the abstract interface, read (and try to understand) more examples, struggle, then “think” that I understood it, realize (a few months to a year later) that I haven’t - that I have missed some facet of it, rinse and repeat, despair at some point that I am probably never going to truly master it…</summary></entry><entry><title type="html">Micro Web Framework in Python</title><link href="https://lemonteaa.github.io/exercises/2017/08/27/micro-web-framework-in-python.html" rel="alternate" type="text/html" title="Micro Web Framework in Python" /><published>2017-08-27T20:26:00+08:00</published><updated>2017-08-27T20:26:00+08:00</updated><id>https://lemonteaa.github.io/exercises/2017/08/27/micro-web-framework-in-python</id><content type="html" xml:base="https://lemonteaa.github.io/exercises/2017/08/27/micro-web-framework-in-python.html">&lt;p&gt;Web Framework is arguably the most often used kind of library in real world, as well as being something that keeps being reinvented for every programming language and every generation of programmer. Given such ubiquity, it is strange that it is not included in the canon of the undergrad Computer Science cirriculum alongside Operating System, Database, and Compiler. This post seeks to bridge this gap by presenting a series of short exercise that culiminates in building your own micro web framework. Have fun!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Note:&lt;/em&gt; This exercise is inspired by &lt;a href=&quot;https://ruslanspivak.com/lsbaws-part1/&quot;&gt;Ruslan’s “Let’s Build A Web Server”&lt;/a&gt; series as a kind of follow up. As we will be using online resources to help, please read the reference section at the end first before beginning the exercise.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;0-preparation&quot;&gt;0. Preparation&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(Difficulty: Easy to Medium+ depending on how serious you get)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First we want to refine some aspect of the codes in the blog series to make further development on top of them more pleasant to work with.&lt;/p&gt;

&lt;p&gt;a) You may come across problem when trying to test part 1 using telnet in window. It turns out that telnet may decide to send packets as it receives characters you type, rather than sending them all at once. Since the function &lt;code class=&quot;highlighter-rouge&quot;&gt;client_connection.recv(1024)&lt;/code&gt; means trying to get &lt;strong&gt;something&lt;/strong&gt; with an upper bound of fetching 1024 bytes at most, you may get cut off after entering a single character. What we really need is some sort of protocol coupled with a stream interface - we should be persistantly reading until we know enough about the beginning part of the content sent to know the actual length of the whole payload - in this case it is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt; http header field that will tell us.&lt;/p&gt;

&lt;p&gt;Extract suitable function from part 2’s code to help with parsing the packet’s content, and then write a code snippet to properly read the packet and insert it into the code in part 1. (Hint: use the readline and read function)&lt;/p&gt;

&lt;p&gt;b) Add logging to the code in part 1 and part 2 so that we can debug more easily. After importing logging, add the line&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(asctime)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s [&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(levelname)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s] &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(message)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;for a minimal setup, then add log in places you think are important.&lt;/p&gt;

&lt;p&gt;c) The code in part 2 skipped some details of the WSGI requirement to simplify things, and we need to add some of that back in.
i. The &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH_INFO&lt;/code&gt; parameter is currently the whole path. Write functions to extract query string into &lt;code class=&quot;highlighter-rouge&quot;&gt;QUERY_STRING&lt;/code&gt; and correct the line for &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH_INFO&lt;/code&gt; correspondingly.
ii. Write functions to extract all http headers and add them to the environ dict in one stroke. (Be careful about special case of &lt;code class=&quot;highlighter-rouge&quot;&gt;CONTENT_LENGTH&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;(Optional) d) Study using multiprocessing to make a httpd daemon so that starting/stopping server is less tedious.&lt;/p&gt;

&lt;h2 id=&quot;1-elements-of-a-framework&quot;&gt;1. Elements of a Framework&lt;/h2&gt;
&lt;p&gt;A Web Framework provides its own model of how things work, as well as a more convenient and/or more powerful interface to the user than the actual interface to the web server (which in this case is the WSGI). They achieve this by layering on top of the basic interface, doing some of the tasks that can be generalized. We will build a heavily simplified micro web framework incrementally, starting with miscellaneous functions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Difficulty: Easy)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;a) The first issue is that the data structure in WSGI is too low-level with everything packed in one single env dict - we want to present the data in a cleaner way that is also more meaningful from a user’s point of view.&lt;/p&gt;

&lt;p&gt;Let’s create a class named &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpReq&lt;/code&gt; (Shortform for HTTP Request) that is just data structure:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpReq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It should have the following attributes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;url&lt;/td&gt;
      &lt;td&gt;The URL being requested.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;method&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;headers&lt;/td&gt;
      &lt;td&gt;a python dict whose keys are the header names and the values are the corresponding header values.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;getparams&lt;/td&gt;
      &lt;td&gt;if request method is &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;, this should be a python dict of the request parameters whose keys are parameter names and the values are the corresponding parameter values. The value should be a python array if there is a repeat of parameter name.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;postparams&lt;/td&gt;
      &lt;td&gt;if request method is &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;, this should be a python dict with the request parameters in the same schema as getparams.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;i. Write a helper function &lt;code class=&quot;highlighter-rouge&quot;&gt;extractHeaders(env)&lt;/code&gt; to extract headers from the env dict according to the requirement for the class &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpReq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ii. Write a function &lt;code class=&quot;highlighter-rouge&quot;&gt;get_req(env)&lt;/code&gt; to construct and return a &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpReq&lt;/code&gt; object from the env dict, conforming to the above specification.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; You are allowed to use the module &lt;code class=&quot;highlighter-rouge&quot;&gt;urlparse&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;urllib.parse&lt;/code&gt; if using Python 3) in standard library for this question.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Difficulty: Hard)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;b) The second and third (and fourth) issues are that it is still too cumbersome to work directly with HTTP request and response (too much boilerplate code to extract data from request object manually as well as assembly/building response object), and for larger projects with many ‘pages’ located at various URL, doing everything in one function is confusing and difficult to manage (try searching through/jumping around the code!). Different frameworks may use different mechanisms, but some common ideas are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use handler that focus on dealing with requests on one particular (or one family of) resource.&lt;/li&gt;
  &lt;li&gt;Inject various kinds of parameters into the handler, and only require the handler to return the core content of the response (or return an abstracted response object)&lt;/li&gt;
  &lt;li&gt;Some frameworks will also allow automatic configuration of the web application itselfs to varying degree.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this exercise, we will implement a ‘router’ in the framework (explained in question 2 below), use dependency injection-like method to provide the parameters, and use decorator for auto-config (a similar thing is called annotation-driven config in Java).&lt;/p&gt;

&lt;p&gt;Implement a decorator called &lt;code class=&quot;highlighter-rouge&quot;&gt;route&lt;/code&gt; that is applied to methods (which is a kind of callable in python) acting as handler. The decorator should have the following arguments:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Required?&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;url&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;mandatory&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;for which URL will this handler be able to process the request?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;method&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;optional&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;any restriction on request type? &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; if handler only deals with GET request, &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; for POST request only, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ANY&lt;/code&gt; for no restriction. Defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;ANY&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It should wrap the method and apply dependency injection by inspecting the method argument names and providing the corresponding request parameters (using &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; as value if it doesn’t exist).&lt;/p&gt;

&lt;p&gt;As an example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TodoApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/todo/create'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTodoListItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# ...snip...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here the route’s URL is ‘/todo/create’, the method is &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;, and the decorator should extract request parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pos&lt;/code&gt; if they exists.&lt;/p&gt;

&lt;h2 id=&quot;2-piecing-stuff-together&quot;&gt;2. Piecing Stuff Together&lt;/h2&gt;
&lt;p&gt;A router is something that route a request to a suitable handler for further processing. The handlers are matched/tested against the request by examining its HTTP method and URL, and in more advanced cases patterns/regex can be used when matching URL (which we won’t do here). Usually a map/registry of handlers are internally recorded and used for matching.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Difficulty: Easy+)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;a) In older generations of web framework the user is responsible for providing/configuring the handler map manually/explicitly, for example by calling a function with the full handler map as argument, or by calling a register function for each handler/route. Newer generation can be auto-config as mentioned in Q1 above.&lt;/p&gt;

&lt;p&gt;i. Write a function &lt;code class=&quot;highlighter-rouge&quot;&gt;buildHandlerMap(clz)&lt;/code&gt;, that accept a class meta-object as argument, extract all handlers inside that class (i.e. methods in the class decorated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@route&lt;/code&gt;), and return the handler map. The map should be a list of 4-tuple with format &lt;code class=&quot;highlighter-rouge&quot;&gt;(&amp;lt;method name&amp;gt;, &amp;lt;URL in route decorator&amp;gt;, &amp;lt;method in route decorator&amp;gt;, &amp;lt;the handler callable&amp;gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(Hint: modify your code in Q1 b to add suitable attributes to the callable, so that the meta-data stored in the decorator itself can be inspected)&lt;/p&gt;

&lt;p&gt;ii. Write a function &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatchReq(handlerMap, req)&lt;/code&gt;, that when given the handler map built from Q2 a(i), and a &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpReq&lt;/code&gt; object, will perform the routing as described above. It should call the first handler in the list that matches successfully with req supplied as argument, and then return the result of that call, or raise an Exception with message &lt;code class=&quot;highlighter-rouge&quot;&gt;No route found&lt;/code&gt; otherwise.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Difficulty: Medium)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;b) We are now finally ready to write the ‘main function’ of our framework. Finish the following code snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;microFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlerMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildHandlerMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# TODO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;(Difficulty: Easy+)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;c) i. Now test the framework you’ve just written by writting an example web application. Your test should include at least one route each for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Returning a html form to submit&lt;/li&gt;
  &lt;li&gt;A page accepting query parameter called through GET&lt;/li&gt;
  &lt;li&gt;A page that accept form submit through POST&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may optionally test for default argument in function in Python.&lt;/p&gt;

&lt;p&gt;ii. Test drive your web application. Open an interactive Python session, and type suitable command to package a web application, “deploy” it to the custom web server (after enhancements in question 0), and start the server. Open your browser and tests that it behaves as expected.&lt;/p&gt;

&lt;h2 id=&quot;optional-3-extension&quot;&gt;(Optional) 3. Extension&lt;/h2&gt;
&lt;p&gt;In this question we try to extend our web framework to support more functionality. We will provide only the goal - you are free to come up with your own idea! (See reference section for explanation, supporting materials etc if you get stuck)&lt;/p&gt;

&lt;p&gt;a) Add support for manipulating Cookie.&lt;/p&gt;

&lt;p&gt;b) i. Based on part a, now implement Session.&lt;/p&gt;

&lt;p&gt;ii. Can you make your implementation of a and b(i) be thread-safe?&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;h3 id=&quot;q0&quot;&gt;Q.0&lt;/h3&gt;
&lt;p&gt;The original tutorial/DIY series is at &lt;a href=&quot;https://ruslanspivak.com/lsbaws-part1/&quot;&gt;here&lt;/a&gt; (Part 1, follow links at bottom to get to other parts), and we assume that the reader has already read (but not neccessarily worked out) both part 1 and part 2 throughout this exercise.&lt;/p&gt;

&lt;p&gt;We will be working and perhaps tinklering with both HTTP’s protocol detail and drill down on WSGI’s interface a bit. For http, the authoritative reference is the &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4&quot;&gt;original spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Python’s standard socket library provide a function &lt;code class=&quot;highlighter-rouge&quot;&gt;socket.makefile&lt;/code&gt; to allow accessing socket through a file-like api. However there are some subtlety involved and it have (previously?) some limitations. Nonetheless it is good enough for our exercise. See &lt;a href=&quot;http://stackoverflow.com/questions/12203800/should-i-close-makefileed-socket-and-it-is-original-socket-independently&quot;&gt;this&lt;/a&gt; for hints on how to use it.&lt;/p&gt;

&lt;p&gt;One of Python’s strength has been in its battery included philosophy while providing an easy, accessible interface and supporting a wide variety of system integration tasks. Logging is taken care of in a similar spirit and it is in fact a built in library. Read &lt;a href=&quot;https://docs.python.org/2/howto/logging.html#logging-basic-tutorial&quot;&gt;Python’s doc&lt;/a&gt; for an introduction.&lt;/p&gt;

&lt;p&gt;It turns out that you cannot test the simple server in part 2 with chrome because of speculative connection that send nothing, see &lt;a href=&quot;http://stackoverflow.com/questions/4761913/server-socket-receives-2-http-requests-when-i-send-from-chrome-and-receives-one&quot;&gt;this&lt;/a&gt; for explanation.&lt;/p&gt;

&lt;p&gt;WSGI is an old school interface that still works - similar to the CGI interface at the dawn of web 2.0 one or two decades before. Refer to &lt;a href=&quot;https://wsgi.readthedocs.io/en/latest/definitions.html&quot;&gt;the WSGI Community Website&lt;/a&gt; for a brief description of the environ keys, and read &lt;a href=&quot;http://wsgi.tutorial.codepoint.net/&quot;&gt;Clodoaldo Neto’s WSGI Tutorial&lt;/a&gt; to quickily learn how to work with it practically.&lt;/p&gt;

&lt;p&gt;For a concise but still in-depth explanation of the multiprocessing module, see &lt;a href=&quot;https://pymotw.com/2/multiprocessing/&quot;&gt;the Python Module Of the Week’s entry&lt;/a&gt;. This website is also useful in general for getting a tour of various Python modules.&lt;/p&gt;

&lt;p&gt;Aside from specific pages mentioned above, Python has a good amount of online materials ranging from beginner-level-tutorial to more advanced articles. One example is &lt;a href=&quot;http://docs.python-guide.org/en/latest/&quot;&gt;The Hitchhiker’s Guide to Python by Kenneth Reitz&lt;/a&gt;. Meanwhile, do not forget that Python’s &lt;a href=&quot;https://docs.python.org/2/index.html&quot;&gt;official documentation&lt;/a&gt; has reasonable average quality too, so check it out before looking for supplementary materials.&lt;/p&gt;

&lt;h3 id=&quot;q1&quot;&gt;Q.1&lt;/h3&gt;
&lt;p&gt;Web framework is a foundational, classical piece of software and as such there has been numerous specific frameworks, in a wide variety of context (e.g. different language) throughout the years. In spite of “recent” innovations such as Ruby On Rails and Express in Node.js (and many new generation, lightweight frameworks emphasizing interactive development), their basic principles remain the same (and so in my opinion belongs to the realm of Computer Science). See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Web_frameworks&quot;&gt;the MDN Web Docs’ entry on Server-side Web Framework&lt;/a&gt; for an introduction to what they do. (&lt;em&gt;Sidenote:&lt;/em&gt; The MDN is also in general an authoritative reference especially for front-end developer)&lt;/p&gt;

&lt;p&gt;Decorator is a somewhat tricky feature in Python because it uses higher order function in an essential way, and also because there are different use cases with subtly different syntax. Two blog posts that explain these points are &lt;a href=&quot;https://www.thecodeship.com/patterns/guide-to-python-function-decorators/&quot;&gt;[1]&lt;/a&gt; at a beginner level, and &lt;a href=&quot;http://scottlobdell.me/2015/04/decorators-arguments-python/&quot;&gt;[2]&lt;/a&gt; that also covers the more advanced cases of using a class as decorator.&lt;/p&gt;

&lt;h3 id=&quot;q3&quot;&gt;Q.3&lt;/h3&gt;
&lt;p&gt;Cookie and web sessions are closely related concepts. Cookie solves the problem of maintaining state across HTTP requests (the HTTP protocol itself is stateless) by changing the protocol specification to require browser cooperation. Server can set a designated header in its HTTP response, which the browser should honor by saving the data in its own memory and repeating the data in all subsequent requests (until expiry or reset) in another designated header. See &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_cookie&quot;&gt;Wikipedia’s Article&lt;/a&gt; for details and &lt;a href=&quot;https://tools.ietf.org/html/rfc6265&quot;&gt;RFC6265&lt;/a&gt; for the specification itself.&lt;/p&gt;

&lt;p&gt;Web Session solve a similar class of problem as Cookie, but with the state stored on server side. The usual way to do it is to build on top of Cookie: the server generate a session ID and set it as the Cookie value. Any state that need to be saved is stored on server side by associating that data with the session ID, which can later be retrieved by lookup. Authentication can be achieved by choosing a suitable scheme for generating the session ID with various cryptographic/security properties (Full security requires many more considerations though). In this exercise you can ignore security issues and just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;uuid&lt;/code&gt; module in Python. See &lt;a href=&quot;http://machinesaredigging.com/2013/10/29/how-does-a-web-session-work/&quot;&gt;[3]&lt;/a&gt; for an illustrated example. Also see &lt;a href=&quot;https://web.stanford.edu/~ouster/cgi-bin/cs142-fall10/lecture.php?topic=cookie&quot;&gt;[4]&lt;/a&gt; for a condensed summary of the discussions above.&lt;/p&gt;

&lt;p&gt;Concurrency is an intrinsically difficult problem that we sometimes cannot avoid (espcially more so in this age when the free lunch given by Mooer’s law is basically over). Python offer a number of facilities for doing multithreading - see for example &lt;a href=&quot;http://www.laurentluce.com/posts/python-threads-synchronization-locks-rlocks-semaphores-conditions-events-and-queues/comment-page-1/&quot;&gt;[5]&lt;/a&gt; for a catalogue of options.&lt;/p&gt;

&lt;p&gt;Unfortunately it also turns out that concurrency is one of the weak spot in Python due to the infamous Global Interpreter Lock (GIL). In short, even if multi-threading is done correctly you may not get the desired performance boost. See &lt;a href=&quot;https://jeffknupp.com/blog/2012/03/31/pythons-hardest-problem/&quot;&gt;Jeff Knupp’s blog post “Python’s Hardest Problem”&lt;/a&gt; for an account of the problem and its &lt;a href=&quot;https://jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited/&quot;&gt;follow up article&lt;/a&gt; for a list of possible remedies. The standard advise given when asking this problem on forums such as stackoverflow is “Use multiprocessing instead of threading”. Read &lt;a href=&quot;https://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python&quot;&gt;this&lt;/a&gt; for a summarized comparison.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Wow, you really read to the end! As a reward for that, &lt;a href=&quot;https://github.com/lemonteaa/python-exercise/tree/master/micro_web_framework&quot;&gt;here&lt;/a&gt; is my own work-out of these exercises - exluding bonus sections)&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Web Framework is arguably the most often used kind of library in real world, as well as being something that keeps being reinvented for every programming language and every generation of programmer. Given such ubiquity, it is strange that it is not included in the canon of the undergrad Computer Science cirriculum alongside Operating System, Database, and Compiler. This post seeks to bridge this gap by presenting a series of short exercise that culiminates in building your own micro web framework. Have fun! Important Note: This exercise is inspired by Ruslan’s “Let’s Build A Web Server” series as a kind of follow up. As we will be using online resources to help, please read the reference section at the end first before beginning the exercise.</summary></entry></feed>