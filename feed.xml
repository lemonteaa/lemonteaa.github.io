<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="https://lemonteaa.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lemonteaa.github.io/" rel="alternate" type="text/html" /><updated>2017-09-01T00:37:38+08:00</updated><id>https://lemonteaa.github.io/</id><title type="html">(into tech :lemontea)</title><subtitle>Site Generated by [Jekyll](https://jekyllrb.com/) using customized version of the [Minima](https://github.com/jekyll/minima) theme.
</subtitle><entry><title type="html">The Monad Tutorial Fallacy, Part One: Introduction/Prequel</title><link href="https://lemonteaa.github.io/fundamentals/2017/08/28/the-monad-tutorial-fallacy-part-one-introduction-prequel.html" rel="alternate" type="text/html" title="The Monad Tutorial Fallacy, Part One: Introduction/Prequel" /><published>2017-08-28T22:56:00+08:00</published><updated>2017-08-28T22:56:00+08:00</updated><id>https://lemonteaa.github.io/fundamentals/2017/08/28/the-monad-tutorial-fallacy-part-one-introduction-prequel</id><content type="html" xml:base="https://lemonteaa.github.io/fundamentals/2017/08/28/the-monad-tutorial-fallacy-part-one-introduction-prequel.html">&lt;p&gt;Understanding how monad works is a kind of mandatory rite of passage for any programmer aspiring to truly master the functional paradigm (of the advanced statically typed kind). Unfortunately it is an unforgiving trial: in spite of the large amount of tutorials out there the construction itself just seem to have some kind of irreducible complexity whose reason is mostly opaque to neophytes.&lt;/p&gt;

&lt;p&gt;Interestingly, although I mainly studied math when I was an undergrad, I first came to learn monad through the usual programmer’s way - see some hand-wavy explanation of what it is/does, see introductory examples of monads, read the abstract interface, read (and try to understand) more examples, struggle, then “think” that I understood it, realize (a few months to a year later) that I haven’t - that I have missed some facet of it, rinse and repeat, despair at some point that I am probably never going to truly master it…
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Until I study monad from the perspective of a pure mathematician with no thought given to applications. Then everything clicked. “Why don’t you tell me this earlier?”&lt;/p&gt;

&lt;p&gt;So as a service mainly to myself, I’m writing this series of post retracing the story of monad (cleaned up of course). &lt;strong&gt;&lt;em&gt;In clear violation of the warning of the infamous &lt;a href=&quot;https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/&quot;&gt;Monad Tutorial Fallacy&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt; You have been warned.&lt;/p&gt;

&lt;p&gt;In retrospect, the reasons that learning-through-example/pattern didn’t work for me is because:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The pattern emerging from the examples is not the monad itself (at least, not its interface nor its implementation). It is sort of like the mismatch of thinking in the problem domain vs the solution domain.&lt;/li&gt;
  &lt;li&gt;Unlike interface in traditional OOP languages, there are variants of the monad interface(s) with translation “formula” between them - a situation where Haskell typeclass shines but which add confusion to beginners. More importantly, unlike other context where things decompose obviously, the “moving pieces” of the monad interface seems to be tightly coupled to each other and look like the wrong decomposition, so that while it is possible to say understand any of its parts if I focus my mind on it for a while, it is hard to hold a mental conception/model of the whole thing in my head in one piece. Exactly the same situation where understanding a large, interlocking system is scary because you can’t really hold the full picture in your head and have to work on it piece-by-piece, always worrying about possible side effects.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Okay, let’s begin the story. &lt;em&gt;(Prerequisite: &lt;del&gt;Bachelor’s degree in Pure Math&lt;/del&gt; Knowledge of some category theory and basic abstract algebra)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Warning to actual mathematician: skipping all proofs as this is a tech blog and not a math blog, and because you can find them elsewhere/do it yourself anyway. Or is it just a lame excuse on my part to not make this post ridiculously long?)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before Monad, there’s the Adjoint Functor. But even that is a pretty mysterious abstraction as impenetrable as the monad. So let’s talk about &lt;del&gt;concrete&lt;/del&gt; prototypical example, which in our story will be the free algebra.&lt;/p&gt;

&lt;p&gt;Recall that given any unstructured set &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, the free algebra generated by &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;/over &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, denoted &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt;, is the algebra formed by taking all formal expressions over &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; with the obvious algebraic operations, and where elements are identified if and only if they can be proved to be identities under the axioms of the algebraic system we are using. (So &lt;script type=&quot;math/tex&quot;&gt;a+(b+c)&lt;/script&gt; is the same element as &lt;script type=&quot;math/tex&quot;&gt;(a+b)+c&lt;/script&gt;.) The intuition for this construction is that it is a tautological one: the formal expressions represent things that simply have to exists in any algebra containing &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; (e.g. If &lt;script type=&quot;math/tex&quot;&gt;a, b&lt;/script&gt; are in &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, and we have some algebra &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; containing &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, then necessarily &lt;script type=&quot;math/tex&quot;&gt;a + b&lt;/script&gt; is in &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; by closure law), and then we impose the minimal constraint on the generated algebra by identifying only what have to be (those that can be proved to be equivalent).&lt;/p&gt;

&lt;p&gt;Now the categorical way to think of free algebra is that they are a universal construction: There is an obvious embedding &lt;script type=&quot;math/tex&quot;&gt;\iota&lt;/script&gt; of &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; into &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt;, and for any other algebra &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; that contains &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; (through the embedding &lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt;), we always have an unique homomorphism &lt;script type=&quot;math/tex&quot;&gt;\phi: F(X) \rightarrow Y&lt;/script&gt; so that the diagram below commutes:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\array{
    X &amp; \stackrel{\iota}\rightarrow &amp; F(X) \\
      &amp; {}_g \searrow       &amp; \downarrow^\phi \\
      &amp;                     &amp; Y
} %]]&gt;&lt;/script&gt;

&lt;p&gt;If you actually read category theory textbook you may find the above diagram doesn’t look quite right: the problem is that we have been a bit loose and didn’t clearly distinguish which object belongs in which category: we can’t really just say &lt;script type=&quot;math/tex&quot;&gt;X \rightarrow F(X)&lt;/script&gt; as &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; is in the category of set, while &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt; is in the category of algebra. We can fix this (at the cost of making the diagram more complicated looking) by using the forgetful functor &lt;script type=&quot;math/tex&quot;&gt;G: \mathbf{Algebra} \rightarrow \mathbf{Set}&lt;/script&gt;, which just stripe away all the algebraic operations, leaving only the set of elements. So the embedding become: &lt;script type=&quot;math/tex&quot;&gt;I: X \rightarrow GF(X)&lt;/script&gt; as a map/morphism between sets. And voila - this is the natural transformation called &lt;strong&gt;the unit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is also a nifty idea that will become critical later on: adjoint functor is a theory of duality, and whenever there is such an adjunction the properties outlined above also work if we flip all the arrows (i.e. take the dual in category-speak). In particular there would naturally be a morphism &lt;script type=&quot;math/tex&quot;&gt;E: FG(A) \rightarrow A&lt;/script&gt; for any algebra &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;, called &lt;strong&gt;the counit&lt;/strong&gt;. But what is this? &lt;script type=&quot;math/tex&quot;&gt;FG(A)&lt;/script&gt; is the free algebra whose underlying elements are &lt;script type=&quot;math/tex&quot;&gt;G(A)&lt;/script&gt;, or just the elements of &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;. So &lt;script type=&quot;math/tex&quot;&gt;FG(A)&lt;/script&gt;’s elements are formal expressions, where all those variables take values in &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;, &lt;em&gt;where algebraic operations are well defined since &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; is an algebra&lt;/em&gt;. &lt;strong&gt;E is an expression evaluator!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But there’s still one thing more (at least). The duality/symmetry of an adjunction become apparent once we express it in terms of a &lt;em&gt;natural&lt;/em&gt; isomorphism between two hom-sets. (In fact this representation is the key ingredient in the proof of the duality mentioned above anyway) Packaged up in a nice formula, it reads: &lt;script type=&quot;math/tex&quot;&gt;{\operatorname{Hom}}_{\mathbf{Algebra}}(FX, Y) \cong {\operatorname{Hom}}_{\mathbf{Set}}(X, GY)&lt;/script&gt;. What does it mean? Well, similar to how any linear transformation is uniquely determined by the values it takes on any basis of the source vector space, any homomorphism from the free algebra &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt; to any other algebra &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;, is uniquely determined by the value it takes over a natural basis, which is just the underlying set/set of variables &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;. Equivalently, any such map induces a full homomorphism (and not just a map of sets) over &lt;script type=&quot;math/tex&quot;&gt;F(X)&lt;/script&gt; by the obvious algebra law (e.g. If &lt;script type=&quot;math/tex&quot;&gt;\phi(a) = p&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\phi(b) = q&lt;/script&gt;, then &lt;script type=&quot;math/tex&quot;&gt;\phi(a + 2b)&lt;/script&gt; can be defined as &lt;script type=&quot;math/tex&quot;&gt;p + 2q&lt;/script&gt;). The reason for the appearance of the forgetful functor &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; is the same as in the discussion on universal property.&lt;/p&gt;

&lt;p&gt;Now we mostly understand Adjoint Functors (excluding the more theory side of things, such as the Special and General Adjoint Functor Theorem for existence/construction of &lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; from &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt;), but so what? Here comes the important part: &lt;strong&gt;&lt;em&gt;we can interpret (typed) pure functional programming through category theory&lt;/em&gt;&lt;/strong&gt;, and a suitably comprehension interpretive framework serves as the foundation for understanding monad, among other things.&lt;/p&gt;

&lt;p&gt;In the simplest situation, a Category is a typed version of the composition higher order function. The objects in the Category are the type of the system, morphisms from &lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt; are the pure (computable) functions of type &lt;script type=&quot;math/tex&quot;&gt;A \rightarrow B&lt;/script&gt;, and composition of arrows (in the category) correspond to function compositions (in our programming model). Even though it appears to be trivial and useless, this naive model can be extended and changed in various way, and you may even specify your own Category/Programming Model! (I promise to give examples of these in Part 3 or something of this series)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Adjoint Functors represents the duality between an unstructured, raw computational model/domain versus a structured, contextual computational model/domain.&lt;/em&gt; So we first design and specify a custom-made Category &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}&lt;/script&gt; (where all its element - object, morphism and composition - need not be the standard/usual one) that capture/model the particular context we want, and Category &lt;script type=&quot;math/tex&quot;&gt;\mathcal{C}&lt;/script&gt; remains the standard one in last paragraph. Then the functors &lt;script type=&quot;math/tex&quot;&gt;F: \mathcal{C} \rightarrow \mathcal{D}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;G: \mathcal{C} \leftarrow \mathcal{D}&lt;/script&gt; provides the natural translation between these two contrasting model of computation. In particular &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; is an embedding functor: any computation can be trivially considered as computation with context by simply carrying out all computation without using or depending on the context at all. (In practice though describing &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; is not trivial since category &lt;script type=&quot;math/tex&quot;&gt;\mathcal{D}&lt;/script&gt; is itself not trivial) On the other hand, any computation with context is still a computation (Church-Turing thesis), so &lt;script type=&quot;math/tex&quot;&gt;U&lt;/script&gt; interpret it as plain computation by forgetting/stripping away the extra structure (but no information is lost - it is the marking of context, and not the content of the context, that is being stripped). In more silly terms, &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; tells you that you can technically write assembly in any high level (Turing complete) language, while &lt;script type=&quot;math/tex&quot;&gt;U&lt;/script&gt; tells you that ultimately any such high level language will be compiled down into assembly anyway.&lt;/p&gt;</content><author><name></name></author><summary type="html">Understanding how monad works is a kind of mandatory rite of passage for any programmer aspiring to truly master the functional paradigm (of the advanced statically typed kind). Unfortunately it is an unforgiving trial: in spite of the large amount of tutorials out there the construction itself just seem to have some kind of irreducible complexity whose reason is mostly opaque to neophytes. Interestingly, although I mainly studied math when I was an undergrad, I first came to learn monad through the usual programmer’s way - see some hand-wavy explanation of what it is/does, see introductory examples of monads, read the abstract interface, read (and try to understand) more examples, struggle, then “think” that I understood it, realize (a few months to a year later) that I haven’t - that I have missed some facet of it, rinse and repeat, despair at some point that I am probably never going to truly master it…</summary></entry><entry><title type="html">Micro Web Framework in Python</title><link href="https://lemonteaa.github.io/exercises/2017/08/27/micro-web-framework-in-python.html" rel="alternate" type="text/html" title="Micro Web Framework in Python" /><published>2017-08-27T20:26:00+08:00</published><updated>2017-08-27T20:26:00+08:00</updated><id>https://lemonteaa.github.io/exercises/2017/08/27/micro-web-framework-in-python</id><content type="html" xml:base="https://lemonteaa.github.io/exercises/2017/08/27/micro-web-framework-in-python.html">&lt;p&gt;Web Framework is arguably the most often used kind of library in real world, as well as being something that keeps being reinvented for every programming language and every generation of programmer. Given such ubiquity, it is strange that it is not included in the canon of the undergrad Computer Science cirriculum alongside Operating System, Database, and Compiler. This post seeks to bridge this gap by presenting a series of short exercise that culiminates in building your own micro web framework. Have fun!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Note:&lt;/em&gt; This exercise is inspired by &lt;a href=&quot;https://ruslanspivak.com/lsbaws-part1/&quot;&gt;Ruslan’s “Let’s Build A Web Server”&lt;/a&gt; series as a kind of follow up. As we will be using online resources to help, please read the reference section at the end first before beginning the exercise.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;0-preparation&quot;&gt;0. Preparation&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(Difficulty: Easy to Medium+ depending on how serious you get)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First we want to refine some aspect of the codes in the blog series to make further development on top of them more pleasant to work with.&lt;/p&gt;

&lt;p&gt;a) You may come across problem when trying to test part 1 using telnet in window. It turns out that telnet may decide to send packets as it receives characters you type, rather than sending them all at once. Since the function &lt;code class=&quot;highlighter-rouge&quot;&gt;client_connection.recv(1024)&lt;/code&gt; means trying to get &lt;strong&gt;something&lt;/strong&gt; with an upper bound of fetching 1024 bytes at most, you may get cut off after entering a single character. What we really need is some sort of protocol coupled with a stream interface - we should be persistantly reading until we know enough about the beginning part of the content sent to know the actual length of the whole payload - in this case it is the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt; http header field that will tell us.&lt;/p&gt;

&lt;p&gt;Extract suitable function from part 2’s code to help with parsing the packet’s content, and then write a code snippet to properly read the packet and insert it into the code in part 1. (Hint: use the readline and read function)&lt;/p&gt;

&lt;p&gt;b) Add logging to the code in part 1 and part 2 so that we can debug more easily. After importing logging, add the line&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basicConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(asctime)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s [&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(levelname)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s] &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(message)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;for a minimal setup, then add log in places you think are important.&lt;/p&gt;

&lt;p&gt;c) The code in part 2 skipped some details of the WSGI requirement to simplify things, and we need to add some of that back in.
i. The &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH_INFO&lt;/code&gt; parameter is currently the whole path. Write functions to extract query string into &lt;code class=&quot;highlighter-rouge&quot;&gt;QUERY_STRING&lt;/code&gt; and correct the line for &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH_INFO&lt;/code&gt; correspondingly.
ii. Write functions to extract all http headers and add them to the environ dict in one stroke. (Be careful about special case of &lt;code class=&quot;highlighter-rouge&quot;&gt;CONTENT_LENGTH&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;(Optional) d) Study using multiprocessing to make a httpd daemon so that starting/stopping server is less tedious.&lt;/p&gt;

&lt;h2 id=&quot;1-elements-of-a-framework&quot;&gt;1. Elements of a Framework&lt;/h2&gt;
&lt;p&gt;A Web Framework provides its own model of how things work, as well as a more convenient and/or more powerful interface to the user than the actual interface to the web server (which in this case is the WSGI). They achieve this by layering on top of the basic interface, doing some of the tasks that can be generalized. We will build a heavily simplified micro web framework incrementally, starting with miscellaneous functions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Difficulty: Easy)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;a) The first issue is that the data structure in WSGI is too low-level with everything packed in one single env dict - we want to present the data in a cleaner way that is also more meaningful from a user’s point of view.&lt;/p&gt;

&lt;p&gt;Let’s create a class named &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpReq&lt;/code&gt; (Shortform for HTTP Request) that is just data structure:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpReq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It should have the following attributes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;url&lt;/td&gt;
      &lt;td&gt;The URL being requested.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;method&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;headers&lt;/td&gt;
      &lt;td&gt;a python dict whose keys are the header names and the values are the corresponding header values.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;getparams&lt;/td&gt;
      &lt;td&gt;if request method is &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;, this should be a python dict of the request parameters whose keys are parameter names and the values are the corresponding parameter values. The value should be a python array if there is a repeat of parameter name.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;postparams&lt;/td&gt;
      &lt;td&gt;if request method is &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;, this should be a python dict with the request parameters in the same schema as getparams.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;i. Write a helper function &lt;code class=&quot;highlighter-rouge&quot;&gt;extractHeaders(env)&lt;/code&gt; to extract headers from the env dict according to the requirement for the class &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpReq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ii. Write a function &lt;code class=&quot;highlighter-rouge&quot;&gt;get_req(env)&lt;/code&gt; to construct and return a &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpReq&lt;/code&gt; object from the env dict, conforming to the above specification.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; You are allowed to use the module &lt;code class=&quot;highlighter-rouge&quot;&gt;urlparse&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;urllib.parse&lt;/code&gt; if using Python 3) in standard library for this question.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Difficulty: Hard)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;b) The second and third (and fourth) issues are that it is still too cumbersome to work directly with HTTP request and response (too much boilerplate code to extract data from request object manually as well as assembly/building response object), and for larger projects with many ‘pages’ located at various URL, doing everything in one function is confusing and difficult to manage (try searching through/jumping around the code!). Different frameworks may use different mechanisms, but some common ideas are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use handler that focus on dealing with requests on one particular (or one family of) resource.&lt;/li&gt;
  &lt;li&gt;Inject various kinds of parameters into the handler, and only require the handler to return the core content of the response (or return an abstracted response object)&lt;/li&gt;
  &lt;li&gt;Some frameworks will also allow automatic configuration of the web application itselfs to varying degree.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this exercise, we will implement a ‘router’ in the framework (explained in question 2 below), use dependency injection-like method to provide the parameters, and use decorator for auto-config (a similar thing is called annotation-driven config in Java).&lt;/p&gt;

&lt;p&gt;Implement a decorator called &lt;code class=&quot;highlighter-rouge&quot;&gt;route&lt;/code&gt; that is applied to methods (which is a kind of callable in python) acting as handler. The decorator should have the following arguments:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Required?&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;url&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;mandatory&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;for which URL will this handler be able to process the request?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;method&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;optional&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;any restriction on request type? &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; if handler only deals with GET request, &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; for POST request only, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ANY&lt;/code&gt; for no restriction. Defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;ANY&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It should wrap the method and apply dependency injection by inspecting the method argument names and providing the corresponding request parameters (using &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; as value if it doesn’t exist).&lt;/p&gt;

&lt;p&gt;As an example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TodoApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/todo/create'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addTodoListItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# ...snip...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here the route’s URL is ‘/todo/create’, the method is &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;, and the decorator should extract request parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pos&lt;/code&gt; if they exists.&lt;/p&gt;

&lt;h2 id=&quot;2-piecing-stuff-together&quot;&gt;2. Piecing Stuff Together&lt;/h2&gt;
&lt;p&gt;A router is something that route a request to a suitable handler for further processing. The handlers are matched/tested against the request by examining its HTTP method and URL, and in more advanced cases patterns/regex can be used when matching URL (which we won’t do here). Usually a map/registry of handlers are internally recorded and used for matching.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Difficulty: Easy+)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;a) In older generations of web framework the user is responsible for providing/configuring the handler map manually/explicitly, for example by calling a function with the full handler map as argument, or by calling a register function for each handler/route. Newer generation can be auto-config as mentioned in Q1 above.&lt;/p&gt;

&lt;p&gt;i. Write a function &lt;code class=&quot;highlighter-rouge&quot;&gt;buildHandlerMap(clz)&lt;/code&gt;, that accept a class meta-object as argument, extract all handlers inside that class (i.e. methods in the class decorated with &lt;code class=&quot;highlighter-rouge&quot;&gt;@route&lt;/code&gt;), and return the handler map. The map should be a list of 4-tuple with format &lt;code class=&quot;highlighter-rouge&quot;&gt;(&amp;lt;method name&amp;gt;, &amp;lt;URL in route decorator&amp;gt;, &amp;lt;method in route decorator&amp;gt;, &amp;lt;the handler callable&amp;gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(Hint: modify your code in Q1 b to add suitable attributes to the callable, so that the meta-data stored in the decorator itself can be inspected)&lt;/p&gt;

&lt;p&gt;ii. Write a function &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatchReq(handlerMap, req)&lt;/code&gt;, that when given the handler map built from Q2 a(i), and a &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpReq&lt;/code&gt; object, will perform the routing as described above. It should call the first handler in the list that matches successfully with req supplied as argument, and then return the result of that call, or raise an Exception with message &lt;code class=&quot;highlighter-rouge&quot;&gt;No route found&lt;/code&gt; otherwise.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Difficulty: Medium)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;b) We are now finally ready to write the ‘main function’ of our framework. Finish the following code snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;microFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlerMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildHandlerMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;# TODO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;(Difficulty: Easy+)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;c) i. Now test the framework you’ve just written by writting an example web application. Your test should include at least one route each for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Returning a html form to submit&lt;/li&gt;
  &lt;li&gt;A page accepting query parameter called through GET&lt;/li&gt;
  &lt;li&gt;A page that accept form submit through POST&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may optionally test for default argument in function in Python.&lt;/p&gt;

&lt;p&gt;ii. Test drive your web application. Open an interactive Python session, and type suitable command to package a web application, “deploy” it to the custom web server (after enhancements in question 0), and start the server. Open your browser and tests that it behaves as expected.&lt;/p&gt;

&lt;h2 id=&quot;optional-3-extension&quot;&gt;(Optional) 3. Extension&lt;/h2&gt;
&lt;p&gt;In this question we try to extend our web framework to support more functionality. We will provide only the goal - you are free to come up with your own idea! (See reference section for explanation, supporting materials etc if you get stuck)&lt;/p&gt;

&lt;p&gt;a) Add support for manipulating Cookie.&lt;/p&gt;

&lt;p&gt;b) i. Based on part a, now implement Session.&lt;/p&gt;

&lt;p&gt;ii. Can you make your implementation of a and b(i) be thread-safe?&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;h3 id=&quot;q0&quot;&gt;Q.0&lt;/h3&gt;
&lt;p&gt;The original tutorial/DIY series is at &lt;a href=&quot;https://ruslanspivak.com/lsbaws-part1/&quot;&gt;here&lt;/a&gt; (Part 1, follow links at bottom to get to other parts), and we assume that the reader has already read (but not neccessarily worked out) both part 1 and part 2 throughout this exercise.&lt;/p&gt;

&lt;p&gt;We will be working and perhaps tinklering with both HTTP’s protocol detail and drill down on WSGI’s interface a bit. For http, the authoritative reference is the &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4&quot;&gt;original spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Python’s standard socket library provide a function &lt;code class=&quot;highlighter-rouge&quot;&gt;socket.makefile&lt;/code&gt; to allow accessing socket through a file-like api. However there are some subtlety involved and it have (previously?) some limitations. Nonetheless it is good enough for our exercise. See &lt;a href=&quot;http://stackoverflow.com/questions/12203800/should-i-close-makefileed-socket-and-it-is-original-socket-independently&quot;&gt;this&lt;/a&gt; for hints on how to use it.&lt;/p&gt;

&lt;p&gt;One of Python’s strength has been in its battery included philosophy while providing an easy, accessible interface and supporting a wide variety of system integration tasks. Logging is taken care of in a similar spirit and it is in fact a built in library. Read &lt;a href=&quot;https://docs.python.org/2/howto/logging.html#logging-basic-tutorial&quot;&gt;Python’s doc&lt;/a&gt; for an introduction.&lt;/p&gt;

&lt;p&gt;It turns out that you cannot test the simple server in part 2 with chrome because of speculative connection that send nothing, see &lt;a href=&quot;http://stackoverflow.com/questions/4761913/server-socket-receives-2-http-requests-when-i-send-from-chrome-and-receives-one&quot;&gt;this&lt;/a&gt; for explanation.&lt;/p&gt;

&lt;p&gt;WSGI is an old school interface that still works - similar to the CGI interface at the dawn of web 2.0 one or two decades before. Refer to &lt;a href=&quot;https://wsgi.readthedocs.io/en/latest/definitions.html&quot;&gt;the WSGI Community Website&lt;/a&gt; for a brief description of the environ keys, and read &lt;a href=&quot;http://wsgi.tutorial.codepoint.net/&quot;&gt;Clodoaldo Neto’s WSGI Tutorial&lt;/a&gt; to quickily learn how to work with it practically.&lt;/p&gt;

&lt;p&gt;For a concise but still in-depth explanation of the multiprocessing module, see &lt;a href=&quot;https://pymotw.com/2/multiprocessing/&quot;&gt;the Python Module Of the Week’s entry&lt;/a&gt;. This website is also useful in general for getting a tour of various Python modules.&lt;/p&gt;

&lt;p&gt;Aside from specific pages mentioned above, Python has a good amount of online materials ranging from beginner-level-tutorial to more advanced articles. One example is &lt;a href=&quot;http://docs.python-guide.org/en/latest/&quot;&gt;The Hitchhiker’s Guide to Python by Kenneth Reitz&lt;/a&gt;. Meanwhile, do not forget that Python’s &lt;a href=&quot;https://docs.python.org/2/index.html&quot;&gt;official documentation&lt;/a&gt; has reasonable average quality too, so check it out before looking for supplementary materials.&lt;/p&gt;

&lt;h3 id=&quot;q1&quot;&gt;Q.1&lt;/h3&gt;
&lt;p&gt;Web framework is a foundational, classical piece of software and as such there has been numerous specific frameworks, in a wide variety of context (e.g. different language) throughout the years. In spite of “recent” innovations such as Ruby On Rails and Express in Node.js (and many new generation, lightweight frameworks emphasizing interactive development), their basic principles remain the same (and so in my opinion belongs to the realm of Computer Science). See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Web_frameworks&quot;&gt;the MDN Web Docs’ entry on Server-side Web Framework&lt;/a&gt; for an introduction to what they do. (&lt;em&gt;Sidenote:&lt;/em&gt; The MDN is also in general an authoritative reference especially for front-end developer)&lt;/p&gt;

&lt;p&gt;Decorator is a somewhat tricky feature in Python because it uses higher order function in an essential way, and also because there are different use cases with subtly different syntax. Two blog posts that explain these points are &lt;a href=&quot;https://www.thecodeship.com/patterns/guide-to-python-function-decorators/&quot;&gt;[1]&lt;/a&gt; at a beginner level, and &lt;a href=&quot;http://scottlobdell.me/2015/04/decorators-arguments-python/&quot;&gt;[2]&lt;/a&gt; that also covers the more advanced cases of using a class as decorator.&lt;/p&gt;

&lt;h3 id=&quot;q3&quot;&gt;Q.3&lt;/h3&gt;
&lt;p&gt;Cookie and web sessions are closely related concepts. Cookie solves the problem of maintaining state across HTTP requests (the HTTP protocol itself is stateless) by changing the protocol specification to require browser cooperation. Server can set a designated header in its HTTP response, which the browser should honor by saving the data in its own memory and repeating the data in all subsequent requests (until expiry or reset) in another designated header. See &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_cookie&quot;&gt;Wikipedia’s Article&lt;/a&gt; for details and &lt;a href=&quot;https://tools.ietf.org/html/rfc6265&quot;&gt;RFC6265&lt;/a&gt; for the specification itself.&lt;/p&gt;

&lt;p&gt;Web Session solve a similar class of problem as Cookie, but with the state stored on server side. The usual way to do it is to build on top of Cookie: the server generate a session ID and set it as the Cookie value. Any state that need to be saved is stored on server side by associating that data with the session ID, which can later be retrieved by lookup. Authentication can be achieved by choosing a suitable scheme for generating the session ID with various cryptographic/security properties (Full security requires many more considerations though). In this exercise you can ignore security issues and just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;uuid&lt;/code&gt; module in Python. See &lt;a href=&quot;http://machinesaredigging.com/2013/10/29/how-does-a-web-session-work/&quot;&gt;[3]&lt;/a&gt; for an illustrated example. Also see &lt;a href=&quot;https://web.stanford.edu/~ouster/cgi-bin/cs142-fall10/lecture.php?topic=cookie&quot;&gt;[4]&lt;/a&gt; for a condensed summary of the discussions above.&lt;/p&gt;

&lt;p&gt;Concurrency is an intrinsically difficult problem that we sometimes cannot avoid (espcially more so in this age when the free lunch given by Mooer’s law is basically over). Python offer a number of facilities for doing multithreading - see for example &lt;a href=&quot;http://www.laurentluce.com/posts/python-threads-synchronization-locks-rlocks-semaphores-conditions-events-and-queues/comment-page-1/&quot;&gt;[5]&lt;/a&gt; for a catalogue of options.&lt;/p&gt;

&lt;p&gt;Unfortunately it also turns out that concurrency is one of the weak spot in Python due to the infamous Global Interpreter Lock (GIL). In short, even if multi-threading is done correctly you may not get the desired performance boost. See &lt;a href=&quot;https://jeffknupp.com/blog/2012/03/31/pythons-hardest-problem/&quot;&gt;Jeff Knupp’s blog post “Python’s Hardest Problem”&lt;/a&gt; for an account of the problem and its &lt;a href=&quot;https://jeffknupp.com/blog/2013/06/30/pythons-hardest-problem-revisited/&quot;&gt;follow up article&lt;/a&gt; for a list of possible remedies. The standard advise given when asking this problem on forums such as stackoverflow is “Use multiprocessing instead of threading”. Read &lt;a href=&quot;https://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python&quot;&gt;this&lt;/a&gt; for a summarized comparison.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Wow, you really read to the end! As a reward for that, &lt;a href=&quot;https://github.com/lemonteaa/python-exercise/tree/master/micro_web_framework&quot;&gt;here&lt;/a&gt; is my own work-out of these exercises - exluding bonus sections)&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Web Framework is arguably the most often used kind of library in real world, as well as being something that keeps being reinvented for every programming language and every generation of programmer. Given such ubiquity, it is strange that it is not included in the canon of the undergrad Computer Science cirriculum alongside Operating System, Database, and Compiler. This post seeks to bridge this gap by presenting a series of short exercise that culiminates in building your own micro web framework. Have fun! Important Note: This exercise is inspired by Ruslan’s “Let’s Build A Web Server” series as a kind of follow up. As we will be using online resources to help, please read the reference section at the end first before beginning the exercise.</summary></entry></feed>